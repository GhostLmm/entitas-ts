var example;
(function (example) {
    (function (Layer) {
        Layer[Layer["DEFAULT"] = 0] = "DEFAULT";
        Layer[Layer["BACKGROUND"] = 1] = "BACKGROUND";
        Layer[Layer["ACTORS_1"] = 2] = "ACTORS_1";
        Layer[Layer["ACTORS_2"] = 3] = "ACTORS_2";
        Layer[Layer["ACTORS_3"] = 4] = "ACTORS_3";
        Layer[Layer["PARTICLES"] = 5] = "PARTICLES";
    })(example.Layer || (example.Layer = {}));
    var Layer = example.Layer;
    (function (Effect) {
        Effect[Effect["PEW"] = 0] = "PEW";
        Effect[Effect["ASPLODE"] = 1] = "ASPLODE";
        Effect[Effect["SMALLASPLODE"] = 2] = "SMALLASPLODE";
    })(example.Effect || (example.Effect = {}));
    var Effect = example.Effect;
    example.config = {
        namespace: "example",
        controllers: {
            main: "MenuController",
            game: "GameController"
        },
        width: window.innerWidth,
        height: window.innerHeight,
        fullScreen: false,
        scale: false,
        stats: true,
        storage: false,
        /** PIXI options */
        options: {
            antialiasing: false,
            transparent: false,
            resolution: window.devicePixelRatio,
            autoResize: true,
            backgroundColor: 0x3c3c3c
        },
        /** Local storage properties  */
        properties: {
            skip: "false",
            leaderboard: "off",
            player: "",
            userId: "",
            playMusic: "true",
            playSfx: "true"
        },
        /** PIXI Loader assets */
        assets: {
            images: (window.devicePixelRatio >= 2) ? "res/images.json" : "res/images.json",
            normal_fnt: "res/fonts/normal.fnt",
            hud_fnt: "res/fonts/hud.fnt",
            asplode: "res/sounds/asplode.ogg",
            pew: "res/sounds/pew.ogg",
            smallasplode: "res/sounds/smallasplode.ogg",
            panel_png: "assets/img/panel-650x400.png"
        },
        /** Bosco prefabs */
        resources: {
            bullet: {
                path: "bullet.png",
                tint: 0xffd800ff,
                anchor: { x: 0.5, y: 0.5 }
            },
            enemy1: {
                path: "enemy1.png",
                tint: 0xff008e,
                anchor: { x: 0.5, y: 0.5 }
            },
            enemy2: {
                path: "enemy2.png",
                tint: 0xff008e,
                anchor: { x: 0.5, y: 0.5 }
            },
            enemy3: {
                path: "enemy3.png",
                tint: 0xff008e,
                anchor: { x: 0.5, y: 0.5 }
            },
            explosion: {
                path: "explosion.png",
                tint: 0xffd80080,
                anchor: { x: 0.5, y: 0.5 }
            },
            fighter: {
                path: "fighter.png",
                tint: 0x5dff81,
                anchor: { x: 0.5, y: 0.5 }
            },
            particle: {
                path: "particle.png",
                tint: 0xffd800ff,
                anchor: { x: 0.5, y: 0.5 }
            },
            star: {
                path: "particle.png",
                tint: 0xffd800ff,
                anchor: { x: 0.5, y: 0.5 }
            }
        },
        /** EZGUI */
        theme: "kenney",
        ezgui: {
            menu: {
                id: "mainScreen",
                component: "MainScreen",
                width: window.innerWidth,
                height: window.innerHeight,
                image: "assets/img/panel-650x400.png",
                logo: { height: 100, transparent: true, text: "Shmup",
                    font: { size: "75px", family: "Skranji", color: "red" } },
                buttons: [
                    { event: "play", text: "Play", width: 300, height: 80 },
                    { event: "options", text: "Options", width: 300, height: 80 }
                ]
            }
        }
    };
})(example || (example = {}));
/**
 * Entitas Generated Classes for example
 *
 * do not edit this file
 */
var example;
(function (example) {
    "use strict";
    var Pool = entitas.Pool;
    (function (CoreComponentIds) {
        CoreComponentIds[CoreComponentIds["Bounds"] = 0] = "Bounds";
        CoreComponentIds[CoreComponentIds["Bullet"] = 1] = "Bullet";
        CoreComponentIds[CoreComponentIds["ColorAnimation"] = 2] = "ColorAnimation";
        CoreComponentIds[CoreComponentIds["Enemy"] = 3] = "Enemy";
        CoreComponentIds[CoreComponentIds["Expires"] = 4] = "Expires";
        CoreComponentIds[CoreComponentIds["Firing"] = 5] = "Firing";
        CoreComponentIds[CoreComponentIds["Health"] = 6] = "Health";
        CoreComponentIds[CoreComponentIds["ParallaxStar"] = 7] = "ParallaxStar";
        CoreComponentIds[CoreComponentIds["Player"] = 8] = "Player";
        CoreComponentIds[CoreComponentIds["Position"] = 9] = "Position";
        CoreComponentIds[CoreComponentIds["ScaleAnimation"] = 10] = "ScaleAnimation";
        CoreComponentIds[CoreComponentIds["SoundEffect"] = 11] = "SoundEffect";
        CoreComponentIds[CoreComponentIds["Sprite"] = 12] = "Sprite";
        CoreComponentIds[CoreComponentIds["Velocity"] = 13] = "Velocity";
        CoreComponentIds[CoreComponentIds["Score"] = 14] = "Score";
        CoreComponentIds[CoreComponentIds["Destroy"] = 15] = "Destroy";
        CoreComponentIds[CoreComponentIds["Mouse"] = 16] = "Mouse";
        CoreComponentIds[CoreComponentIds["Scale"] = 17] = "Scale";
        CoreComponentIds[CoreComponentIds["Resource"] = 18] = "Resource";
        CoreComponentIds[CoreComponentIds["Layer"] = 19] = "Layer";
        CoreComponentIds[CoreComponentIds["TotalComponents"] = 20] = "TotalComponents";
    })(example.CoreComponentIds || (example.CoreComponentIds = {}));
    var CoreComponentIds = example.CoreComponentIds;
    entitas.Entity.initialize(CoreComponentIds.TotalComponents, { "entities": 200, "components": 128 });
    var BoundsComponent = (function () {
        function BoundsComponent() {
        }
        return BoundsComponent;
    })();
    example.BoundsComponent = BoundsComponent;
    var BulletComponent = (function () {
        function BulletComponent() {
        }
        return BulletComponent;
    })();
    example.BulletComponent = BulletComponent;
    var ColorAnimationComponent = (function () {
        function ColorAnimationComponent() {
        }
        return ColorAnimationComponent;
    })();
    example.ColorAnimationComponent = ColorAnimationComponent;
    var EnemyComponent = (function () {
        function EnemyComponent() {
        }
        return EnemyComponent;
    })();
    example.EnemyComponent = EnemyComponent;
    var ExpiresComponent = (function () {
        function ExpiresComponent() {
        }
        return ExpiresComponent;
    })();
    example.ExpiresComponent = ExpiresComponent;
    var FiringComponent = (function () {
        function FiringComponent() {
        }
        return FiringComponent;
    })();
    example.FiringComponent = FiringComponent;
    var HealthComponent = (function () {
        function HealthComponent() {
        }
        return HealthComponent;
    })();
    example.HealthComponent = HealthComponent;
    var ParallaxStarComponent = (function () {
        function ParallaxStarComponent() {
        }
        return ParallaxStarComponent;
    })();
    example.ParallaxStarComponent = ParallaxStarComponent;
    var PlayerComponent = (function () {
        function PlayerComponent() {
        }
        return PlayerComponent;
    })();
    example.PlayerComponent = PlayerComponent;
    var PositionComponent = (function () {
        function PositionComponent() {
        }
        return PositionComponent;
    })();
    example.PositionComponent = PositionComponent;
    var ScaleAnimationComponent = (function () {
        function ScaleAnimationComponent() {
        }
        return ScaleAnimationComponent;
    })();
    example.ScaleAnimationComponent = ScaleAnimationComponent;
    var SoundEffectComponent = (function () {
        function SoundEffectComponent() {
        }
        return SoundEffectComponent;
    })();
    example.SoundEffectComponent = SoundEffectComponent;
    var SpriteComponent = (function () {
        function SpriteComponent() {
        }
        return SpriteComponent;
    })();
    example.SpriteComponent = SpriteComponent;
    var VelocityComponent = (function () {
        function VelocityComponent() {
        }
        return VelocityComponent;
    })();
    example.VelocityComponent = VelocityComponent;
    var ScoreComponent = (function () {
        function ScoreComponent() {
        }
        return ScoreComponent;
    })();
    example.ScoreComponent = ScoreComponent;
    var DestroyComponent = (function () {
        function DestroyComponent() {
        }
        return DestroyComponent;
    })();
    example.DestroyComponent = DestroyComponent;
    var MouseComponent = (function () {
        function MouseComponent() {
        }
        return MouseComponent;
    })();
    example.MouseComponent = MouseComponent;
    var ScaleComponent = (function () {
        function ScaleComponent() {
        }
        return ScaleComponent;
    })();
    example.ScaleComponent = ScaleComponent;
    var ResourceComponent = (function () {
        function ResourceComponent() {
        }
        return ResourceComponent;
    })();
    example.ResourceComponent = ResourceComponent;
    var LayerComponent = (function () {
        function LayerComponent() {
        }
        return LayerComponent;
    })();
    example.LayerComponent = LayerComponent;
    var Pools = (function () {
        function Pools() {
        }
        Object.defineProperty(Pools, "allPools", {
            get: function () {
                if (Pools._allPools == null) {
                    Pools._allPools = [Pools.pool];
                }
                return Pools._allPools;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Pools, "pool", {
            get: function () {
                if (Pools._pool == null) {
                    Pools._pool = new Pool(CoreComponentIds, CoreComponentIds.TotalComponents);
                    entitas.viewer.VisualDebugging.init(Pools._pool);
                }
                return Pools._pool;
            },
            enumerable: true,
            configurable: true
        });
        return Pools;
    })();
    example.Pools = Pools;
})(example || (example = {}));
var example;
(function (example) {
    var Matcher = entitas.Matcher;
    var AddViewSystem = (function () {
        function AddViewSystem() {
            /**
             * OnEntityAdded - Resource component.
             *
             * Load & configure the sprite for this resource component
             *
             * @param group
             * @param e
             * @param index
             * @param component
             */
            this.onEntityAdded = function (group, e, index, component) {
                var sprite = bosco.prefab(e.resource.name, null);
                var position = e.position;
                sprite.position.set(position.x, position.y);
                if (e.hasScale) {
                    var scale = e.scale;
                    sprite.scale.set(scale.x, scale.y);
                }
                var layer = sprite['layer'] = e.layer.ordinal;
                var sprites = bosco['viewContainer'].children;
                /**
                 * Insert sprite in layer order
                 */
                for (var i = 0, l = sprites.length; i < l; i++) {
                    if (layer <= sprites[i]['layer']) {
                        bosco['viewContainer'].addChildAt(sprite, i);
                        e.addSprite(layer, sprite);
                        return;
                    }
                }
                bosco['viewContainer'].addChild(sprite);
                e.addSprite(layer, sprite);
            };
        }
        /**
         * Watch for Resource Added
         *
         * @param pool
         */
        AddViewSystem.prototype.setPool = function (pool) {
            this.pool = pool;
            pool.getGroup(Matcher.Resource).onEntityAdded.add(this.onEntityAdded);
        };
        return AddViewSystem;
    })();
    example.AddViewSystem = AddViewSystem;
})(example || (example = {}));
var example;
(function (example) {
    var Matcher = entitas.Matcher;
    var CollisionSystem = (function () {
        function CollisionSystem() {
        }
        CollisionSystem.prototype.setPool = function (pool) {
            this.pool = pool;
        };
        /**
         * Check for Collision
         */
        CollisionSystem.prototype.execute = function () {
            var collisionPairs = this.collisionPairs;
            for (var i = 0, l = collisionPairs.length; l > i; i++) {
                collisionPairs[i].checkForCollisions();
            }
        };
        /**
         * Create collision handlers
         */
        CollisionSystem.prototype.initialize = function () {
            var _this = this;
            this.pool.setScore(0);
            this.bullets = this.pool.getGroup(Matcher.Bullet);
            this.enemies = this.pool.getGroup(Matcher.Enemy);
            /** Check for bullets hitting enemy ship */
            this.collisionPairs = [];
            this.collisionPairs.push(new CollisionPair(this, this.bullets, this.enemies, {
                handleCollision: function (bullet, ship) {
                    var bp = bullet.position;
                    var health = ship.health;
                    var position = ship.position;
                    var x = bp.x;
                    var y = bp.y;
                    _this.pool.createSmallExplosion(x, y);
                    var i = 5;
                    while (--i > 0)
                        _this.pool.createParticle(x, y);
                    bullet.setDestroy(true);
                    health.health -= 1;
                    if (health.health < 0) {
                        var score = (_this.pool.score);
                        _this.pool.replaceScore(score.value + ship.health.maximumHealth);
                        ship.setDestroy(true);
                        _this.pool.createBigExplosion(position.x, position.y);
                    }
                }
            }));
        };
        return CollisionSystem;
    })();
    example.CollisionSystem = CollisionSystem;
    /**
     *
     */
    var CollisionPair = (function () {
        function CollisionPair(cs, group1, group2, handler) {
            this.groupEntitiesA = group1;
            this.groupEntitiesB = group2;
            this.handler = handler;
            this.cs = cs;
        }
        CollisionPair.prototype.checkForCollisions = function () {
            var handler = this.handler;
            var groupEntitiesA = this.groupEntitiesA.getEntities();
            var groupEntitiesB = this.groupEntitiesB.getEntities();
            var sizeA = groupEntitiesA.length;
            var sizeB = groupEntitiesB.length;
            for (var a = 0; sizeA > a; a++) {
                var entityA = groupEntitiesA[a];
                for (var b = 0; sizeB > b; b++) {
                    var entityB = groupEntitiesB[b];
                    if (this.collisionExists(entityA, entityB)) {
                        handler.handleCollision(entityA, entityB);
                    }
                }
            }
        };
        CollisionPair.prototype.collisionExists = function (e1, e2) {
            if (e1 === null || e2 === null)
                return false;
            var p1 = e1.position;
            var p2 = e2.position;
            var b1 = e1.bounds;
            var b2 = e2.bounds;
            var a = p1.x - p2.x;
            var b = p1.y - p2.y;
            return Math.sqrt(a * a + b * b) - (b1.radius) < (b2.radius);
        };
        return CollisionPair;
    })();
})(example || (example = {}));
var example;
(function (example) {
    var Matcher = entitas.Matcher;
    var ColorAnimationSystem = (function () {
        function ColorAnimationSystem() {
        }
        ColorAnimationSystem.prototype.execute = function () {
            var delta = bosco.delta;
            var entities = this.group.getEntities();
            for (var i = 0, l = entities.length; i < l; i++) {
                var e = entities[i];
                var c = e.colorAnimation;
                var sprite = e.sprite.object;
                if (c.alphaAnimate) {
                    sprite.alpha += c.alphaSpeed * delta;
                    if (sprite.alpha > c.alphaMax || sprite.alpha < c.alphaMin) {
                        if (c.repeat) {
                            c.alphaSpeed = -c.alphaSpeed;
                        }
                        else {
                            c.alphaAnimate = false;
                        }
                    }
                }
            }
        };
        ColorAnimationSystem.prototype.setPool = function (pool) {
            this.pool = pool;
            this.group = pool.getGroup(Matcher.allOf(Matcher.ColorAnimation, Matcher.Sprite));
        };
        return ColorAnimationSystem;
    })();
    example.ColorAnimationSystem = ColorAnimationSystem;
})(example || (example = {}));
var example;
(function (example) {
    var Timer = bosco.utils.Timer;
    var EntitySpawningTimerSystem = (function () {
        function EntitySpawningTimerSystem() {
        }
        EntitySpawningTimerSystem.prototype.execute = function () {
            var rnd = Math.random();
            if (rnd < .5)
                rnd = 1 - rnd;
            var delta = rnd * bosco.delta;
            this.timer1.update(delta);
            this.timer2.update(delta);
            this.timer3.update(delta);
        };
        EntitySpawningTimerSystem.prototype.initialize = function () {
            var _this = this;
            this.timer1 = new Timer(2, true);
            this.timer1.execute = function () {
                _this.pool.createEnemy1();
            };
            this.timer2 = new Timer(6, true);
            this.timer2.execute = function () {
                _this.pool.createEnemy2();
            };
            this.timer3 = new Timer(12, true);
            this.timer3.execute = function () {
                _this.pool.createEnemy3();
            };
        };
        EntitySpawningTimerSystem.prototype.setPool = function (pool) {
            this.pool = pool;
        };
        return EntitySpawningTimerSystem;
    })();
    example.EntitySpawningTimerSystem = EntitySpawningTimerSystem;
})(example || (example = {}));
var example;
(function (example) {
    var Matcher = entitas.Matcher;
    //declare var viewContainer;
    var ExpiringSystem = (function () {
        function ExpiringSystem() {
        }
        ExpiringSystem.prototype.execute = function () {
            var pool = this.pool;
            var entities = this.group.getEntities();
            for (var i = 0, l = entities.length; i < l; i++) {
                var e = entities[i];
                if ((e.expires.delay -= bosco.delta) <= 0) {
                    e.isDestroy = true;
                }
            }
        };
        ExpiringSystem.prototype.setPool = function (pool) {
            this.pool = pool;
            this.group = pool.getGroup(Matcher.allOf(Matcher.Expires));
        };
        return ExpiringSystem;
    })();
    example.ExpiringSystem = ExpiringSystem;
})(example || (example = {}));
var example;
(function (example) {
    var Matcher = entitas.Matcher;
    var BitmapText = PIXI.extras.BitmapText;
    var HealthRenderSystem = (function () {
        function HealthRenderSystem() {
            var _this = this;
            this.onEntityAdded = function (group, e, index, component) {
                // add a text element to the sprite
                var b = new BitmapText('100%', { font: '20px Radio Stars', align: 'left' });
                b.scale.set(0.5, 0.5);
                bosco['viewContainer'].addChild(b);
                _this.texts[e.id] = b;
            };
            this.onEntityRemoved = function (group, e, index, component) {
                // remove the text element from the sprite
                bosco['viewContainer'].removeChild(_this.texts[e.id]);
                _this.texts[e.id] = null;
                delete _this.texts[e.id];
            };
            this.texts = {};
        }
        HealthRenderSystem.prototype.setPool = function (pool) {
            this.pool = pool;
            this.group = pool.getGroup(Matcher.allOf(Matcher.Position, Matcher.Health));
            pool.getGroup(Matcher.Enemy).onEntityAdded.add(this.onEntityAdded);
            pool.getGroup(Matcher.Enemy).onEntityRemoved.add(this.onEntityRemoved);
        };
        HealthRenderSystem.prototype.execute = function () {
            var entities = this.group.getEntities();
            for (var i = 0, l = entities.length; i < l; i++) {
                var e = entities[i];
                if (this.texts[e.id]) {
                    var position = e.position;
                    var health = e.health;
                    var text = this.texts[e.id];
                    var percentage = Math.round(health.health / health.maximumHealth * 100);
                    text.position.set(position.x, position.y);
                    text.text = percentage + "%";
                }
            }
        };
        return HealthRenderSystem;
    })();
    example.HealthRenderSystem = HealthRenderSystem;
})(example || (example = {}));
var example;
(function (example) {
    var BitmapText = PIXI.extras.BitmapText;
    var HudRenderSystem = (function () {
        function HudRenderSystem() {
        }
        HudRenderSystem.prototype.initialize = function () {
            var font = { font: '36px Radio Stars', align: 'left' };
            this.activeEntities = new BitmapText("Active entitiez:           ", font);
            this.totalCreated = new BitmapText("Total created:          ", font);
            this.totalDeleted = new BitmapText("Total deleted:          ", font);
            this.activeEntities.scale.set(0.5);
            this.totalCreated.scale.set(0.5);
            this.totalDeleted.scale.set(0.5);
            this.activeEntities.position.set(0, 20);
            this.totalCreated.position.set(0, 40);
            this.totalDeleted.position.set(0, 60);
            bosco['viewContainer'].addChild(this.activeEntities);
            bosco['viewContainer'].addChild(this.totalCreated);
            bosco['viewContainer'].addChild(this.totalDeleted);
        };
        HudRenderSystem.prototype.execute = function () {
            var pool = this.pool;
            var size = pool.count;
            this.activeEntities.text = "Active entities: " + size;
            this.totalCreated.text = "Total created: " + pool.reusableEntitiesCount;
            this.totalDeleted.text = "Total deleted: " + (pool._creationIndex - size);
        };
        HudRenderSystem.prototype.setPool = function (pool) {
            this.pool = pool;
        };
        return HudRenderSystem;
    })();
    example.HudRenderSystem = HudRenderSystem;
})(example || (example = {}));
var example;
(function (example) {
    var Matcher = entitas.Matcher;
    var MovementSystem = (function () {
        function MovementSystem() {
        }
        MovementSystem.prototype.execute = function () {
            var entities = this.group.getEntities();
            for (var i = 0, l = entities.length; i < l; i++) {
                var e = entities[i];
                var delta = bosco.delta;
                e.position.x += (e.velocity.x * delta);
                e.position.y -= (e.velocity.y * delta);
            }
        };
        MovementSystem.prototype.setPool = function (pool) {
            this.pool = pool;
            this.group = pool.getGroup(Matcher.allOf(Matcher.Position, Matcher.Velocity));
        };
        return MovementSystem;
    })();
    example.MovementSystem = MovementSystem;
})(example || (example = {}));
var example;
(function (example) {
    var Matcher = entitas.Matcher;
    var ParallaxStarRepeatingSystem = (function () {
        function ParallaxStarRepeatingSystem() {
        }
        ParallaxStarRepeatingSystem.prototype.initialize = function () {
            //
            //var width = bosco.config.width;
            //var height = bosco.config.height;
            //
            //for (var i = 0; 500 > i; i++) {
            //  var x = Rnd.nextInt(width);
            //  var y = Rnd.nextInt(height);
            //
            //  var sprite:Sprite = bosco.prefab('star');
            //  sprite.alpha = Rnd.random(127);
            //  sprite.anchor.set(0.5, 0.5);
            //  sprite.position.set(~~x, ~~y);
            //  bosco['viewContainer'].addChild(sprite);
            //
            //  this.pool.createEntity('star')
            //    .addPosition(~~x, ~~y)
            //    .addVelocity(0, Rnd.random(-10, -60))
            //    .addColorAnimation(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, Rnd.random(0.2, 0.7), false, false, false, true, true)
            //    .addSprite(Layer.BACKGROUND, sprite)
            //    .setParallaxStar(true);
            //
            //}
        };
        ParallaxStarRepeatingSystem.prototype.execute = function () {
            //var height = bosco.config.height;
            //var entities = this.group.getEntities();
            //for (var i = 0, l = entities.length; i < l; i++) {
            //  var e = entities[i];
            //  var position:PositionComponent = e.position;
            //
            //  if (position.y >= height) {
            //    position.y = 0;
            //  }
            //}
        };
        ParallaxStarRepeatingSystem.prototype.setPool = function (pool) {
            this.pool = pool;
            this.group = pool.getGroup(Matcher.allOf(Matcher.ParallaxStar, Matcher.Position));
        };
        return ParallaxStarRepeatingSystem;
    })();
    example.ParallaxStarRepeatingSystem = ParallaxStarRepeatingSystem;
})(example || (example = {}));
var example;
(function (example) {
    var Matcher = entitas.Matcher;
    var PlayerInputSystem = (function () {
        function PlayerInputSystem() {
            var _this = this;
            this.timeToFire = 0;
            this.onTouchStart = function (event) {
                event = event.changedTouches ? event.changedTouches[0] : event;
                _this.shoot = true;
                _this.mouseVector = {
                    x: parseInt(event.clientX),
                    y: parseInt(event.clientY)
                };
                return true;
            };
            this.onTouchMove = function (event) {
                event = event.changedTouches ? event.changedTouches[0] : event;
                _this.mouseVector = {
                    x: parseInt(event.clientX),
                    y: parseInt(event.clientY)
                };
                return true;
            };
            this.onTouchEnd = function (event) {
                _this.shoot = false;
            };
        }
        PlayerInputSystem.prototype.execute = function () {
            var entities = this.group.getEntities();
            if (entities.length === 0)
                return;
            var e = entities[0];
            if (this.mouseVector === undefined)
                return;
            var position = e.position;
            var destinationX = this.mouseVector.x;
            var destinationY = this.mouseVector.y;
            if (destinationX === undefined || destinationY === undefined)
                return;
            position.x = this.mouseVector.x;
            position.y = this.mouseVector.y;
            if (this.shoot) {
                if (this.timeToFire <= 0) {
                    this.pool.createBullet(position.x - 27, position.y + 2);
                    this.pool.createBullet(position.x + 27, position.y + 2);
                    this.timeToFire = PlayerInputSystem.FireRate;
                }
            }
            if (this.timeToFire > 0) {
                this.timeToFire -= bosco.delta;
                if (this.timeToFire < 0) {
                    this.timeToFire = 0;
                }
            }
        };
        PlayerInputSystem.prototype.initialize = function () {
            document.addEventListener('touchstart', this.onTouchStart, true);
            document.addEventListener('touchmove', this.onTouchMove, true);
            document.addEventListener('touchend', this.onTouchEnd, true);
            document.addEventListener('mousedown', this.onTouchStart, true);
            document.addEventListener('mousemove', this.onTouchMove, true);
            document.addEventListener('mouseup', this.onTouchEnd, true);
            this.pool.createPlayer();
        };
        PlayerInputSystem.prototype.setPool = function (pool) {
            this.pool = pool;
            this.group = pool.getGroup(Matcher.allOf(Matcher.Player));
        };
        PlayerInputSystem.FireRate = .1;
        return PlayerInputSystem;
    })();
    example.PlayerInputSystem = PlayerInputSystem;
})(example || (example = {}));
var example;
(function (example) {
    var Matcher = entitas.Matcher;
    //declare var viewContainer;
    var RemoveOffscreenShipsSystem = (function () {
        function RemoveOffscreenShipsSystem() {
        }
        RemoveOffscreenShipsSystem.prototype.execute = function () {
            var height = bosco.config.height;
            var pool = this.pool;
            var entities = this.group.getEntities();
            for (var i = 0, l = entities.length; i < l; i++) {
                var e = entities[i];
                if (e.position.y > height - e.bounds.radius) {
                    e.isDestroy = true;
                }
            }
        };
        RemoveOffscreenShipsSystem.prototype.setPool = function (pool) {
            this.pool = pool;
            this.group = pool.getGroup(Matcher.allOf(Matcher.Velocity, Matcher.Position, Matcher.Health, Matcher.Bounds));
        };
        return RemoveOffscreenShipsSystem;
    })();
    example.RemoveOffscreenShipsSystem = RemoveOffscreenShipsSystem;
})(example || (example = {}));
var example;
(function (example) {
    var Matcher = entitas.Matcher;
    var ScaleAnimationSystem = (function () {
        function ScaleAnimationSystem() {
        }
        ScaleAnimationSystem.prototype.execute = function () {
            var delta = bosco.delta;
            var entities = this.group.getEntities();
            for (var i = 0, l = entities.length; i < l; i++) {
                var e = entities[i];
                var scaleAnimation = e.scaleAnimation;
                if (scaleAnimation.active) {
                    //var sprite:Sprite = <Sprite>(e.sprite.object);
                    var scale = e.sprite.object.scale;
                    scale.x += scaleAnimation.speed * delta;
                    scale.y = scale.x;
                    if (scale.x > scaleAnimation.max) {
                        scale.x = scaleAnimation.max;
                        scale.y = scale.x;
                        scaleAnimation.active = false;
                    }
                    else if (scale.x < scaleAnimation.min) {
                        scale.x = scaleAnimation.min;
                        scale.y = scale.x;
                        scaleAnimation.active = false;
                    }
                }
            }
        };
        ScaleAnimationSystem.prototype.setPool = function (pool) {
            this.pool = pool;
            this.group = pool.getGroup(Matcher.allOf(Matcher.ScaleAnimation));
        };
        return ScaleAnimationSystem;
    })();
    example.ScaleAnimationSystem = ScaleAnimationSystem;
})(example || (example = {}));
var example;
(function (example) {
    var Matcher = entitas.Matcher;
    var SoundEffectSystem = (function () {
        function SoundEffectSystem() {
            this.playSfx = false;
        }
        SoundEffectSystem.prototype.setPool = function (pool) {
            this.pool = pool;
            this.group = pool.getGroup(Matcher.allOf(Matcher.SoundEffect));
        };
        SoundEffectSystem.prototype.execute = function () {
            //if (!this.playSfx) return;
            var entities = this.group.getEntities();
            for (var i = 0, l = entities.length; i < l; i++) {
                var e = entities[i];
                var soundEffect = e.soundEffect;
                var sound = this.effect[soundEffect.effect];
                if (sound)
                    sound.play();
                e.removeSoundEffect();
            }
        };
        SoundEffectSystem.prototype.initialize = function () {
            var Howl = window['Howl'];
            this.pew = new Howl({ urls: ['res/sounds/pew.ogg'] });
            this.asplode = new Howl({ urls: ['res/sounds/asplode.ogg'] });
            this.smallasplode = new Howl({ urls: ['res/sounds/smallasplode.ogg'] });
            this.effect = [];
            this.effect[example.Effect.PEW] = this.pew;
            this.effect[example.Effect.ASPLODE] = this.asplode;
            this.effect[example.Effect.SMALLASPLODE] = this.smallasplode;
        };
        return SoundEffectSystem;
    })();
    example.SoundEffectSystem = SoundEffectSystem;
})(example || (example = {}));
var example;
(function (example) {
    var Matcher = entitas.Matcher;
    var SpriteRenderSystem = (function () {
        function SpriteRenderSystem() {
        }
        SpriteRenderSystem.prototype.execute = function () {
            var entities = this.group.getEntities();
            for (var i = 0, l = entities.length; i < l; i++) {
                var e = entities[i];
                var sprite = e.sprite.object;
                sprite.position.set(e.position.x, e.position.y);
            }
        };
        SpriteRenderSystem.prototype.setPool = function (pool) {
            this.pool = pool;
            this.group = pool.getGroup(Matcher.allOf(Matcher.Position, Matcher.Sprite));
        };
        return SpriteRenderSystem;
    })();
    example.SpriteRenderSystem = SpriteRenderSystem;
})(example || (example = {}));
var example;
(function (example) {
    var Pools = example.Pools;
    var Systems = entitas.Systems;
    var GameController = (function () {
        function GameController() {
        }
        GameController.prototype.start = function () {
            this.systems = this.createSystems(Pools.pool);
            this.systems.initialize();
        };
        GameController.prototype.createSystems = function (pool) {
            return new Systems()
                .add(pool.createSystem(example.MovementSystem))
                .add(pool.createSystem(example.PlayerInputSystem))
                .add(pool.createSystem(example.SoundEffectSystem))
                .add(pool.createSystem(example.CollisionSystem))
                .add(pool.createSystem(example.ExpiringSystem))
                .add(pool.createSystem(example.EntitySpawningTimerSystem))
                .add(pool.createSystem(example.ParallaxStarRepeatingSystem))
                .add(pool.createSystem(example.ColorAnimationSystem))
                .add(pool.createSystem(example.ScaleAnimationSystem))
                .add(pool.createSystem(example.RemoveOffscreenShipsSystem))
                .add(pool.createSystem(example.SpriteRenderSystem))
                .add(pool.createSystem(example.AddViewSystem))
                .add(pool.createSystem(example.HealthRenderSystem))
                .add(pool.createSystem(example.HudRenderSystem))
                .add(pool.createSystem(example.DestroySystem));
        };
        GameController.prototype.update = function (delta) {
            this.systems.execute();
        };
        return GameController;
    })();
    example.GameController = GameController;
})(example || (example = {}));
var example;
(function (example) {
    var MenuController = (function () {
        function MenuController() {
        }
        MenuController.prototype.start = function () {
            var theme = bosco.config.theme;
            //EZGUI.Theme.load([`assets/${theme}-theme/${theme}-theme.json`], () => {
            this.gui = EZGUI.create(bosco.config.ezgui.menu, theme);
            this.gui.on('play', function (event, btn) { return bosco.controller('game'); });
            this.gui.on('options', function (event, btn) { return bosco.controller('game'); });
            bosco['viewContainer'].addChild(this.gui);
            //});
        };
        MenuController.prototype.stop = function () {
            bosco['viewContainer'].removeChild(this.gui);
        };
        MenuController.prototype.update = function (delta) {
        };
        return MenuController;
    })();
    example.MenuController = MenuController;
})(example || (example = {}));
var example;
(function (example) {
    var Input = bosco.utils.Input;
    var Pools = example.Pools;
    var InputController = (function () {
        function InputController() {
        }
        InputController.prototype.start = function () {
            Pools.pool.replaceMouse(0, 0);
        };
        InputController.prototype.update = function (delta) {
            var pos = Input.mousePosition;
            Pools.pool.mouse.x = pos.x;
            Pools.pool.mouse.y = pos.y;
            Pools.pool.isFiring = Input.getMouseButton(0);
        };
        return InputController;
    })();
    example.InputController = InputController;
})(example || (example = {}));
var example;
(function (example) {
    var Pools = example.Pools;
    var Matcher = entitas.Matcher;
    var Text = PIXI.Text;
    var ScoreLabelController = (function () {
        function ScoreLabelController() {
        }
        ScoreLabelController.prototype.start = function () {
            var _this = this;
            this.label = new Text('Score', { font: 'bold 50px Arial', fill: 'white' });
            this.label.position.set((bosco.config.width - this.label.width) / 2, 10);
            bosco['viewContainer'].addChild(this.label);
            var pool = Pools.pool;
            pool.getGroup(Matcher.Score).onEntityAdded.add(function (group, entity, index, component) {
                _this.updateScore(entity.score.value);
            });
            console.log(pool);
            this.updateScore(pool.score.value);
            this.fps = new Text('FPS', { font: 'bold 30px Arial', fill: 'white' });
            this.fps.position.set(0, 10);
            bosco['viewContainer'].addChild(this.fps);
        };
        ScoreLabelController.prototype.update = function (delta) {
            var fps = bosco.fps;
            if (this._fps !== fps) {
                this.fps.text = 'FPS ' + fps;
                this._fps = fps;
            }
        };
        ScoreLabelController.prototype.updateScore = function (score) {
            this.label.text = 'Score ' + score;
        };
        return ScoreLabelController;
    })();
    example.ScoreLabelController = ScoreLabelController;
})(example || (example = {}));
var example;
(function (example) {
    var Matcher = entitas.Matcher;
    var DestroySystem = (function () {
        function DestroySystem() {
        }
        DestroySystem.prototype.execute = function () {
            var entities = this.group.getEntities();
            for (var i = 0, l = entities.length; i < l; i++) {
                var e = entities[i];
                bosco['viewContainer'].removeChild(e.sprite.object);
                this.pool.destroyEntity(e);
            }
        };
        DestroySystem.prototype.setPool = function (pool) {
            this.pool = pool;
            this.group = pool.getGroup(Matcher.allOf(Matcher.Destroy));
        };
        return DestroySystem;
    })();
    example.DestroySystem = DestroySystem;
})(example || (example = {}));
/**
 * Extensions for Example
 */
var example;
(function (example) {
    var extensions;
    (function (extensions) {
        var Tau = Math.PI * 2;
        var Layer = example.Layer;
        var Effect = example.Effect;
        var Rnd = bosco.utils.Rnd;
        /**
         * Create the player
         */
        entitas.Pool.prototype.createPlayer = function () {
            this.createEntity('Player')
                .addBounds(43)
                .addVelocity(0, 0)
                .addPosition(~~(bosco.config.width / 4), ~~(bosco.config.height - 80))
                .addLayer(Layer.ACTORS_3)
                .addResource('fighter')
                .setPlayer(true);
        };
        /**
         * Create a bullet at (x,y)
         *
         * @param x
         * @param y
         */
        entitas.Pool.prototype.createBullet = function (x, y) {
            this.createEntity('Bullet')
                .addPosition(~~x, ~~y)
                .addVelocity(0, 800)
                .addBounds(5)
                .addExpires(1)
                .addSoundEffect(Effect.PEW)
                .addLayer(Layer.PARTICLES)
                .addResource('bullet')
                .setBullet(true);
        };
        /**
         * Create a particle at (x,y)
         *
         * @param x
         * @param y
         */
        entitas.Pool.prototype.createParticle = function (x, y) {
            var radians = Math.random() * Tau;
            var magnitude = Rnd.random(200);
            var velocityX = magnitude * Math.cos(radians);
            var velocityY = magnitude * Math.sin(radians);
            var scale = Rnd.random(0.5, 1);
            this.createEntity('Particle')
                .addExpires(1)
                .addColorAnimation(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, false, false, false, true, true)
                .addPosition(~~x, ~~y)
                .addVelocity(velocityX, velocityY)
                .addScale(scale, scale)
                .addLayer(Layer.PARTICLES)
                .addResource('particle');
        };
        /**
         * Create a small explosion at (x,y)
         *
         * @param x
         * @param y
         */
        entitas.Pool.prototype.createSmallExplosion = function (x, y) {
            var scale = .1;
            this.createEntity('SmallExp')
                .addExpires(0.5)
                .addScaleAnimation(scale / 100, scale, -3, false, true)
                .addPosition(~~x, ~~y)
                .addScale(scale, scale)
                .addLayer(Layer.PARTICLES)
                .addResource('explosion');
        };
        /**
         * Create a big explosion at (x,y)
         *
         * @param x
         * @param y
         */
        entitas.Pool.prototype.createBigExplosion = function (x, y) {
            var scale = .5;
            this.createEntity('BigExp')
                .addExpires(0.5)
                .addScaleAnimation(scale / 100, scale, -3, false, true)
                .addPosition(~~x, ~~y)
                .addScale(scale, scale)
                .addLayer(Layer.PARTICLES)
                .addResource('explosion');
        };
        /**
         * Create enemy ship #1
         *
         */
        entitas.Pool.prototype.createEnemy1 = function () {
            var x = Rnd.nextInt(bosco.config.width);
            var y = bosco.config.height / 2 - 200;
            this.createEntity("Enemy1")
                .addBounds(20)
                .addPosition(~~x, ~~y)
                .addVelocity(0, -40)
                .addLayer(Layer.ACTORS_1)
                .addResource('enemy1')
                .addHealth(10, 10)
                .setEnemy(true);
        };
        /**
         * Create enemy ship #2
         */
        entitas.Pool.prototype.createEnemy2 = function () {
            var x = Rnd.nextInt(bosco.config.width);
            var y = bosco.config.height / 2 - 100;
            this.createEntity("Enemy2")
                .addBounds(40)
                .addPosition(~~x, ~~y)
                .addVelocity(0, -30)
                .addLayer(Layer.ACTORS_2)
                .addResource('enemy2')
                .addHealth(20, 20)
                .setEnemy(true);
        };
        /**
         * Create enemy ship #3
         */
        entitas.Pool.prototype.createEnemy3 = function () {
            var x = Rnd.nextInt(bosco.config.width);
            var y = bosco.config.height / 2 - 50;
            this.createEntity("Enemy3")
                .addBounds(70)
                .addPosition(~~x, ~~y)
                .addVelocity(0, -20)
                .addLayer(Layer.ACTORS_3)
                .addResource('enemy3')
                .addHealth(60, 60)
                .setEnemy(true);
        };
    })(extensions = example.extensions || (example.extensions = {}));
})(example || (example = {}));
bosco.start(example.config);
//# sourceMappingURL=entitas-cli.js.map