declare module example {
    enum Layer {
        DEFAULT = 0,
        BACKGROUND = 1,
        ACTORS_1 = 2,
        ACTORS_2 = 3,
        ACTORS_3 = 4,
        PARTICLES = 5,
    }
    enum Effect {
        PEW = 0,
        ASPLODE = 1,
        SMALLASPLODE = 2,
    }
    var config: {
        namespace: string;
        controllers: {
            main: string;
            game: string;
        };
        width: number;
        height: number;
        fullScreen: boolean;
        scale: boolean;
        stats: boolean;
        storage: boolean;
        options: {
            antialiasing: boolean;
            transparent: boolean;
            resolution: number;
            autoResize: boolean;
            backgroundColor: number;
        };
        properties: {
            skip: string;
            leaderboard: string;
            player: string;
            userId: string;
            playMusic: string;
            playSfx: string;
        };
        assets: {
            images: string;
            normal_fnt: string;
            hud_fnt: string;
            asplode: string;
            pew: string;
            smallasplode: string;
            panel_png: string;
        };
        resources: {
            bullet: {
                path: string;
                tint: number;
                anchor: {
                    x: number;
                    y: number;
                };
            };
            enemy1: {
                path: string;
                tint: number;
                anchor: {
                    x: number;
                    y: number;
                };
            };
            enemy2: {
                path: string;
                tint: number;
                anchor: {
                    x: number;
                    y: number;
                };
            };
            enemy3: {
                path: string;
                tint: number;
                anchor: {
                    x: number;
                    y: number;
                };
            };
            explosion: {
                path: string;
                tint: number;
                anchor: {
                    x: number;
                    y: number;
                };
            };
            fighter: {
                path: string;
                tint: number;
                anchor: {
                    x: number;
                    y: number;
                };
            };
            particle: {
                path: string;
                tint: number;
                anchor: {
                    x: number;
                    y: number;
                };
            };
            star: {
                path: string;
                tint: number;
                anchor: {
                    x: number;
                    y: number;
                };
            };
        };
        theme: string;
        ezgui: {
            menu: {
                id: string;
                component: string;
                width: number;
                height: number;
                image: string;
                logo: {
                    height: number;
                    transparent: boolean;
                    text: string;
                    font: {
                        size: string;
                        family: string;
                        color: string;
                    };
                };
                buttons: {
                    event: string;
                    text: string;
                    width: number;
                    height: number;
                }[];
            };
        };
    };
}
/**
 * Entitas Generated Classes for example
 *
 * do not edit this file
 */
declare module example {
    import Pool = entitas.Pool;
    import IComponent = entitas.IComponent;
    enum CoreComponentIds {
        Bounds = 0,
        Bullet = 1,
        ColorAnimation = 2,
        Enemy = 3,
        Expires = 4,
        Firing = 5,
        Health = 6,
        ParallaxStar = 7,
        Player = 8,
        Position = 9,
        ScaleAnimation = 10,
        SoundEffect = 11,
        Sprite = 12,
        Velocity = 13,
        Score = 14,
        Destroy = 15,
        Mouse = 16,
        Scale = 17,
        Resource = 18,
        Layer = 19,
        TotalComponents = 20,
    }
    class BoundsComponent implements IComponent {
        radius: number;
    }
    class BulletComponent implements IComponent {
    }
    class ColorAnimationComponent implements IComponent {
        redMin: number;
        redMax: number;
        redSpeed: number;
        greenMin: number;
        greenMax: number;
        greenSpeed: number;
        blueMin: number;
        blueMax: number;
        blueSpeed: number;
        alphaMin: number;
        alphaMax: number;
        alphaSpeed: number;
        redAnimate: boolean;
        greenAnimate: boolean;
        blueAnimate: boolean;
        alphaAnimate: boolean;
        repeat: boolean;
    }
    class EnemyComponent implements IComponent {
    }
    class ExpiresComponent implements IComponent {
        delay: number;
    }
    class FiringComponent implements IComponent {
    }
    class HealthComponent implements IComponent {
        health: number;
        maximumHealth: number;
    }
    class ParallaxStarComponent implements IComponent {
    }
    class PlayerComponent implements IComponent {
    }
    class PositionComponent implements IComponent {
        x: number;
        y: number;
    }
    class ScaleAnimationComponent implements IComponent {
        min: number;
        max: number;
        speed: number;
        repeat: boolean;
        active: boolean;
    }
    class SoundEffectComponent implements IComponent {
        effect: number;
    }
    class SpriteComponent implements IComponent {
        layer: number;
        object: Object;
    }
    class VelocityComponent implements IComponent {
        x: number;
        y: number;
    }
    class ScoreComponent implements IComponent {
        value: number;
    }
    class DestroyComponent implements IComponent {
    }
    class MouseComponent implements IComponent {
        x: number;
        y: number;
    }
    class ScaleComponent implements IComponent {
        x: number;
        y: number;
    }
    class ResourceComponent implements IComponent {
        name: string;
    }
    class LayerComponent implements IComponent {
        ordinal: number;
    }
    class Pools {
        static _allPools: Array<Pool>;
        static allPools: Array<Pool>;
        static _pool: Pool;
        static pool: Pool;
    }
}
declare module example {
    import Pool = entitas.Pool;
    import Group = entitas.Group;
    import Entity = entitas.Entity;
    import ISetPool = entitas.ISetPool;
    import IComponent = entitas.IComponent;
    class AddViewSystem implements ISetPool {
        protected pool: Pool;
        protected group: Group;
        /**
         * Watch for Resource Added
         *
         * @param pool
         */
        setPool(pool: Pool): void;
        /**
         * OnEntityAdded - Resource component.
         *
         * Load & configure the sprite for this resource component
         *
         * @param group
         * @param e
         * @param index
         * @param component
         */
        protected onEntityAdded: (group: Group, e: Entity, index: number, component: IComponent) => void;
    }
}
declare module example {
    import Pool = entitas.Pool;
    import Group = entitas.Group;
    import IInitializeSystem = entitas.IInitializeSystem;
    import IExecuteSystem = entitas.IExecuteSystem;
    import ISetPool = entitas.ISetPool;
    class CollisionSystem implements IInitializeSystem, IExecuteSystem, ISetPool {
        protected pool: Pool;
        protected group: Group;
        protected bullets: Group;
        protected enemies: Group;
        private collisionPairs;
        setPool(pool: Pool): void;
        /**
         * Check for Collision
         */
        execute(): void;
        /**
         * Create collision handlers
         */
        initialize(): void;
    }
}
declare module example {
    import Pool = entitas.Pool;
    import Group = entitas.Group;
    import IExecuteSystem = entitas.IExecuteSystem;
    import ISetPool = entitas.ISetPool;
    class ColorAnimationSystem implements IExecuteSystem, ISetPool {
        protected pool: Pool;
        protected group: Group;
        execute(): void;
        setPool(pool: Pool): void;
    }
}
declare module example {
    import Pool = entitas.Pool;
    import IExecuteSystem = entitas.IExecuteSystem;
    import IInitializeSystem = entitas.IInitializeSystem;
    import ISetPool = entitas.ISetPool;
    class EntitySpawningTimerSystem implements IExecuteSystem, IInitializeSystem, ISetPool {
        protected pool: Pool;
        private timer1;
        private timer2;
        private timer3;
        execute(): void;
        initialize(): void;
        setPool(pool: Pool): void;
    }
}
declare module example {
    import Pool = entitas.Pool;
    import Group = entitas.Group;
    import IExecuteSystem = entitas.IExecuteSystem;
    import ISetPool = entitas.ISetPool;
    class ExpiringSystem implements IExecuteSystem, ISetPool {
        protected pool: Pool;
        protected group: Group;
        execute(): void;
        setPool(pool: Pool): void;
    }
}
declare module example {
    import Pool = entitas.Pool;
    import Group = entitas.Group;
    import Entity = entitas.Entity;
    import IComponent = entitas.IComponent;
    import IExecuteSystem = entitas.IExecuteSystem;
    import ISetPool = entitas.ISetPool;
    class HealthRenderSystem implements IExecuteSystem, ISetPool {
        private texts;
        protected pool: Pool;
        protected group: Group;
        constructor();
        setPool(pool: Pool): void;
        execute(): void;
        protected onEntityAdded: (group: Group, e: Entity, index: number, component: IComponent) => void;
        protected onEntityRemoved: (group: Group, e: Entity, index: number, component: IComponent) => void;
    }
}
declare module example {
    import Pool = entitas.Pool;
    import Group = entitas.Group;
    import IExecuteSystem = entitas.IExecuteSystem;
    import IInitializeSystem = entitas.IInitializeSystem;
    import ISetPool = entitas.ISetPool;
    class HudRenderSystem implements IInitializeSystem, IExecuteSystem, ISetPool {
        protected pool: Pool;
        protected group: Group;
        private activeEntities;
        private totalCreated;
        private totalDeleted;
        initialize(): void;
        execute(): void;
        setPool(pool: Pool): void;
    }
}
declare module example {
    import Pool = entitas.Pool;
    import Group = entitas.Group;
    import IExecuteSystem = entitas.IExecuteSystem;
    import ISetPool = entitas.ISetPool;
    class MovementSystem implements IExecuteSystem, ISetPool {
        protected pool: Pool;
        protected group: Group;
        execute(): void;
        setPool(pool: Pool): void;
    }
}
declare module example {
    import Pool = entitas.Pool;
    import Group = entitas.Group;
    import IInitializeSystem = entitas.IInitializeSystem;
    import IExecuteSystem = entitas.IExecuteSystem;
    import ISetPool = entitas.ISetPool;
    class ParallaxStarRepeatingSystem implements IInitializeSystem, IExecuteSystem, ISetPool {
        protected pool: Pool;
        protected group: Group;
        initialize(): void;
        execute(): void;
        setPool(pool: Pool): void;
    }
}
declare module example {
    import Pool = entitas.Pool;
    import Group = entitas.Group;
    import IExecuteSystem = entitas.IExecuteSystem;
    import IInitializeSystem = entitas.IInitializeSystem;
    import ISetPool = entitas.ISetPool;
    class PlayerInputSystem implements IExecuteSystem, IInitializeSystem, ISetPool {
        protected pool: Pool;
        protected group: Group;
        private static FireRate;
        protected shoot: boolean;
        protected timeToFire: number;
        protected mouseVector: any;
        execute(): void;
        initialize(): void;
        setPool(pool: Pool): void;
        protected onTouchStart: (event: any) => boolean;
        protected onTouchMove: (event: any) => boolean;
        protected onTouchEnd: (event: any) => void;
    }
}
declare module example {
    import Pool = entitas.Pool;
    import Group = entitas.Group;
    import IExecuteSystem = entitas.IExecuteSystem;
    import ISetPool = entitas.ISetPool;
    class RemoveOffscreenShipsSystem implements IExecuteSystem, ISetPool {
        protected pool: Pool;
        protected group: Group;
        execute(): void;
        setPool(pool: Pool): void;
    }
}
declare module example {
    import Pool = entitas.Pool;
    import Group = entitas.Group;
    import IExecuteSystem = entitas.IExecuteSystem;
    import ISetPool = entitas.ISetPool;
    class ScaleAnimationSystem implements IExecuteSystem, ISetPool {
        protected pool: Pool;
        protected group: Group;
        execute(): void;
        setPool(pool: Pool): void;
    }
}
declare module example {
    import Pool = entitas.Pool;
    import Group = entitas.Group;
    import IInitializeSystem = entitas.IInitializeSystem;
    import IExecuteSystem = entitas.IExecuteSystem;
    import ISetPool = entitas.ISetPool;
    class SoundEffectSystem implements IInitializeSystem, IExecuteSystem, ISetPool {
        protected pool: Pool;
        protected group: Group;
        private pew;
        private asplode;
        private smallasplode;
        private playSfx;
        private effect;
        setPool(pool: Pool): void;
        execute(): void;
        initialize(): void;
    }
}
declare module example {
    import Pool = entitas.Pool;
    import Group = entitas.Group;
    import IExecuteSystem = entitas.IExecuteSystem;
    import ISetPool = entitas.ISetPool;
    class SpriteRenderSystem implements IExecuteSystem, ISetPool {
        protected pool: Pool;
        protected group: Group;
        execute(): void;
        setPool(pool: Pool): void;
    }
}
declare module example {
    import Systems = entitas.Systems;
    class GameController {
        systems: Systems;
        start(): void;
        createSystems(pool: any): any;
        update(delta: number): void;
    }
}
declare module example {
    class MenuController {
        protected gui: any;
        start(): void;
        stop(): void;
        update(delta: number): void;
    }
}
declare module example {
    class InputController {
        start(): void;
        update(delta: number): void;
    }
}
declare module example {
    import Text = PIXI.Text;
    class ScoreLabelController {
        label: Text;
        protected fps: Text;
        protected _fps: number;
        start(): void;
        update(delta: number): void;
        updateScore(score: number): void;
    }
}
declare module example {
    import Pool = entitas.Pool;
    import Group = entitas.Group;
    import IExecuteSystem = entitas.IExecuteSystem;
    import ISetPool = entitas.ISetPool;
    class DestroySystem implements IExecuteSystem, ISetPool {
        protected pool: Pool;
        protected group: Group;
        execute(): void;
        setPool(pool: Pool): void;
    }
}
/**
 * Extensions for Example
 */
declare module example.extensions {
}
