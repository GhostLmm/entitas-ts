/**
 * Entitas Generated Extensions
 *
 * do not edit this file
 */
(function(){
  var Pool = entitas.Pool;
  var Entity = entitas.Entity;
  var CoreMatcher = entitas.CoreMatcher;
  var AcceleratableComponent = example.AcceleratableComponent;
  var AcceleratingComponent = example.AcceleratingComponent;
  var DestroyComponent = example.DestroyComponent;
  var MoveComponent = example.MoveComponent;
  var PositionComponent = example.PositionComponent;
  var FinishLineComponent = example.FinishLineComponent;
  var ResourceComponent = example.ResourceComponent;
  var ViewComponent = example.ViewComponent;
  var CoreComponentIds = example.CoreComponentIds;
  Entity.acceleratableComponent = new AcceleratableComponent();
  Object.defineProperty(Entity.prototype, 'isAcceleratable', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Acceleratable);
    },
    set: function(value) {
      if (value !== this.isAcceleratable) {
        if (value) {
          this.addComponent(CoreComponentIds.Acceleratable, Entity.acceleratableComponent);
        } else {
          this.removeComponent(CoreComponentIds.Acceleratable);
        }
      }
    }
  });
  Entity.prototype['setAcceleratable'] = function(value) {
    this.isAcceleratable = value;
    return this;
  };
  Entity.acceleratingComponent = new AcceleratingComponent();
  Object.defineProperty(Entity.prototype, 'isAccelerating', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Accelerating);
    },
    set: function(value) {
      if (value !== this.isAccelerating) {
        if (value) {
          this.addComponent(CoreComponentIds.Accelerating, Entity.acceleratingComponent);
        } else {
          this.removeComponent(CoreComponentIds.Accelerating);
        }
      }
    }
  });
  Entity.prototype['setAccelerating'] = function(value) {
    this.isAccelerating = value;
    return this;
  };
  Entity.destroyComponent = new DestroyComponent();
  Object.defineProperty(Entity.prototype, 'isDestroy', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Destroy);
    },
    set: function(value) {
      if (value !== this.isDestroy) {
        if (value) {
          this.addComponent(CoreComponentIds.Destroy, Entity.destroyComponent);
        } else {
          this.removeComponent(CoreComponentIds.Destroy);
        }
      }
    }
  });
  Entity.prototype['setDestroy'] = function(value) {
    this.isDestroy = value;
    return this;
  };
  Entity._moveComponentPool = [];
  Entity.clearMoveComponentPool = function() {
    Entity._moveComponentPool.length = 0;
  };
  Object.defineProperty(Entity.prototype, 'move', {
    get: function() {
      return this.getComponent(CoreComponentIds.Move);
    }
  });
  Object.defineProperty(Entity.prototype, 'hasMove', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Move);
    }
  });
  Entity.prototype['addMove'] = function(speed, maxSpeed) {
    var component = Entity._moveComponentPool.length > 0 ? Entity._moveComponentPool.pop() : new MoveComponent();
    component.speed = speed;
    component.maxSpeed = maxSpeed;
    return this.addComponent(CoreComponentIds.Move, component);
  };
  Entity.prototype['replaceMove'] = function(speed, maxSpeed) {
    var previousComponent = this.hasMove ? this.move : null;
    var component = Entity._moveComponentPool.length > 0 ? Entity._moveComponentPool.pop() : new MoveComponent();
    component.speed = speed;
    component.maxSpeed = maxSpeed;
    this.replaceComponent(CoreComponentIds.Move, component);
    if (previousComponent != null) {
      Entity._moveComponentPool.push(previousComponent);
    }
    return this;
  };
  Entity.prototype['removeMove'] = function() {
    var component = this.move;
    this.removeComponent(CoreComponentIds.Move);
    Entity._moveComponentPool.push(component);
    return this;
  };
  Entity._positionComponentPool = [];
  Entity.clearPositionComponentPool = function() {
    Entity._positionComponentPool.length = 0;
  };
  Object.defineProperty(Entity.prototype, 'position', {
    get: function() {
      return this.getComponent(CoreComponentIds.Position);
    }
  });
  Object.defineProperty(Entity.prototype, 'hasPosition', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Position);
    }
  });
  Entity.prototype['addPosition'] = function(x, y, z) {
    var component = Entity._positionComponentPool.length > 0 ? Entity._positionComponentPool.pop() : new PositionComponent();
    component.x = x;
    component.y = y;
    component.z = z;
    return this.addComponent(CoreComponentIds.Position, component);
  };
  Entity.prototype['replacePosition'] = function(x, y, z) {
    var previousComponent = this.hasPosition ? this.position : null;
    var component = Entity._positionComponentPool.length > 0 ? Entity._positionComponentPool.pop() : new PositionComponent();
    component.x = x;
    component.y = y;
    component.z = z;
    this.replaceComponent(CoreComponentIds.Position, component);
    if (previousComponent != null) {
      Entity._positionComponentPool.push(previousComponent);
    }
    return this;
  };
  Entity.prototype['removePosition'] = function() {
    var component = this.position;
    this.removeComponent(CoreComponentIds.Position);
    Entity._positionComponentPool.push(component);
    return this;
  };
  Entity.finishLineComponent = new FinishLineComponent();
  Object.defineProperty(Entity.prototype, 'isFinishLine', {
    get: function() {
      return this.hasComponent(CoreComponentIds.FinishLine);
    },
    set: function(value) {
      if (value !== this.isFinishLine) {
        if (value) {
          this.addComponent(CoreComponentIds.FinishLine, Entity.finishLineComponent);
        } else {
          this.removeComponent(CoreComponentIds.FinishLine);
        }
      }
    }
  });
  Entity.prototype['setFinishLine'] = function(value) {
    this.isFinishLine = value;
    return this;
  };
  Entity._resourceComponentPool = [];
  Entity.clearResourceComponentPool = function() {
    Entity._resourceComponentPool.length = 0;
  };
  Object.defineProperty(Entity.prototype, 'resource', {
    get: function() {
      return this.getComponent(CoreComponentIds.Resource);
    }
  });
  Object.defineProperty(Entity.prototype, 'hasResource', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Resource);
    }
  });
  Entity.prototype['addResource'] = function(name) {
    var component = Entity._resourceComponentPool.length > 0 ? Entity._resourceComponentPool.pop() : new ResourceComponent();
    component.name = name;
    return this.addComponent(CoreComponentIds.Resource, component);
  };
  Entity.prototype['replaceResource'] = function(name) {
    var previousComponent = this.hasResource ? this.resource : null;
    var component = Entity._resourceComponentPool.length > 0 ? Entity._resourceComponentPool.pop() : new ResourceComponent();
    component.name = name;
    this.replaceComponent(CoreComponentIds.Resource, component);
    if (previousComponent != null) {
      Entity._resourceComponentPool.push(previousComponent);
    }
    return this;
  };
  Entity.prototype['removeResource'] = function() {
    var component = this.resource;
    this.removeComponent(CoreComponentIds.Resource);
    Entity._resourceComponentPool.push(component);
    return this;
  };
  Entity._viewComponentPool = [];
  Entity.clearViewComponentPool = function() {
    Entity._viewComponentPool.length = 0;
  };
  Object.defineProperty(Entity.prototype, 'view', {
    get: function() {
      return this.getComponent(CoreComponentIds.View);
    }
  });
  Object.defineProperty(Entity.prototype, 'hasView', {
    get: function() {
      return this.hasComponent(CoreComponentIds.View);
    }
  });
  Entity.prototype['addView'] = function(stage) {
    var component = Entity._viewComponentPool.length > 0 ? Entity._viewComponentPool.pop() : new ViewComponent();
    component.stage = stage;
    return this.addComponent(CoreComponentIds.View, component);
  };
  Entity.prototype['replaceView'] = function(stage) {
    var previousComponent = this.hasView ? this.view : null;
    var component = Entity._viewComponentPool.length > 0 ? Entity._viewComponentPool.pop() : new ViewComponent();
    component.stage = stage;
    this.replaceComponent(CoreComponentIds.View, component);
    if (previousComponent != null) {
      Entity._viewComponentPool.push(previousComponent);
    }
    return this;
  };
  Entity.prototype['removeView'] = function() {
    var component = this.view;
    this.removeComponent(CoreComponentIds.View);
    Entity._viewComponentPool.push(component);
    return this;
  };
  CoreMatcher._matcherAcceleratable=null;
  
  Object.defneProperty(CoreMatcher, 'Acceleratable', {
    get: function() {
      if (CoreMatcher._matcherAcceleratable == null) {
        CoreMatcher._matcherAcceleratable = Matcher.allOf(CoreComponentIds.Acceleratable);
      }
      
      return CoreMatcher._matcherAcceleratable;
    }
  });
  CoreMatcher._matcherAccelerating=null;
  
  Object.defneProperty(CoreMatcher, 'Accelerating', {
    get: function() {
      if (CoreMatcher._matcherAccelerating == null) {
        CoreMatcher._matcherAccelerating = Matcher.allOf(CoreComponentIds.Accelerating);
      }
      
      return CoreMatcher._matcherAccelerating;
    }
  });
  CoreMatcher._matcherDestroy=null;
  
  Object.defneProperty(CoreMatcher, 'Destroy', {
    get: function() {
      if (CoreMatcher._matcherDestroy == null) {
        CoreMatcher._matcherDestroy = Matcher.allOf(CoreComponentIds.Destroy);
      }
      
      return CoreMatcher._matcherDestroy;
    }
  });
  CoreMatcher._matcherMove=null;
  
  Object.defneProperty(CoreMatcher, 'Move', {
    get: function() {
      if (CoreMatcher._matcherMove == null) {
        CoreMatcher._matcherMove = Matcher.allOf(CoreComponentIds.Move);
      }
      
      return CoreMatcher._matcherMove;
    }
  });
  CoreMatcher._matcherPosition=null;
  
  Object.defneProperty(CoreMatcher, 'Position', {
    get: function() {
      if (CoreMatcher._matcherPosition == null) {
        CoreMatcher._matcherPosition = Matcher.allOf(CoreComponentIds.Position);
      }
      
      return CoreMatcher._matcherPosition;
    }
  });
  CoreMatcher._matcherFinishLine=null;
  
  Object.defneProperty(CoreMatcher, 'FinishLine', {
    get: function() {
      if (CoreMatcher._matcherFinishLine == null) {
        CoreMatcher._matcherFinishLine = Matcher.allOf(CoreComponentIds.FinishLine);
      }
      
      return CoreMatcher._matcherFinishLine;
    }
  });
  CoreMatcher._matcherResource=null;
  
  Object.defneProperty(CoreMatcher, 'Resource', {
    get: function() {
      if (CoreMatcher._matcherResource == null) {
        CoreMatcher._matcherResource = Matcher.allOf(CoreComponentIds.Resource);
      }
      
      return CoreMatcher._matcherResource;
    }
  });
  CoreMatcher._matcherView=null;
  
  Object.defneProperty(CoreMatcher, 'View', {
    get: function() {
      if (CoreMatcher._matcherView == null) {
        CoreMatcher._matcherView = Matcher.allOf(CoreComponentIds.View);
      }
      
      return CoreMatcher._matcherView;
    }
  });
  Object.defineProperty(Pool.prototype, 'acceleratingEntity', {
    get: function() {
      return this.getGroup(CoreMatcher.Accelerating)[0];
    }
  });
  Object.defineProperty(Pool.prototype, 'isAccelerating', {
    get: function() {
      return this.acceleratingEntity != null;
    },
    set: function(value) {
      var entity = this.acceleratingEntity;
      if (value != (entity != null)) {
        if (value) {
          this.createEntity().isAccelerating = true;
        } else {
          this.destroyEntity(entity);
        }
      }
    }
  });
  Object.defineProperty(Pool.prototype, 'finishLineEntity', {
    get: function() {
      return this.getGroup(CoreMatcher.FinishLine)[0];
    }
  });
  Object.defineProperty(Pool.prototype, 'isFinishLine', {
    get: function() {
      return this.finishLineEntity != null;
    },
    set: function(value) {
      var entity = this.finishLineEntity;
      if (value != (entity != null)) {
        if (value) {
          this.createEntity().isFinishLine = true;
        } else {
          this.destroyEntity(entity);
        }
      }
    }
  });
})();