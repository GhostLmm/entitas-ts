namespace {{ namespace }} 
(**
 * Entitas Generated Components and Extensions for {{ namespace }}
 *
 * do not edit this file
 *)
 
[<AutoOpen>]
module EntitasExtensions =

    open Entitas
    open System
    open System.Collections.Generic

    (**
    * Component extensions
    *)
    type Component with
{% for component in components %}        static member {{ component.key }} with get() = {% increment component_counter %}
{% endfor %}        static member TotalComponents with get() = {% increment component_counter %}

{% for component in components %}
    [<AllowNullLiteral>]
    type {{ component.key }}Component() =
        inherit Component()
{% if component.value == false %}        member val active = false with get, set
{% else %}{% for field in component.value %}        member val {{ field | property }} = {{ field | defaultValue }} with get, set
{% endfor %}{% endif %}{% endfor %}

    (**
    * Matcher extensions
    *)
    type Matcher with
{% for component in components %}
        static member {{ component.key }}
            with get() = 
                Matcher.AllOf(Component.{{ component.key }}) 
{% endfor %}

    (**
    * Entity extensions
    *)
    type Entity with
{% for component in components %}
        (** Entity: {{ component.key }} methods*)
{% if component.value == false %}        static member {{ component.key | camel }}Component= new {{ component.key }}Component()

        member this.is{{ component.key }}
            with get() =
                this.HasComponent(Component.{{ component.key }})
            and set(value) =
                if (value != this.is{{ component.key }}) then
                    this.AddComponent(Component.{{ component.key }}, this.{{ component.key | camel }}Component) |> ignore
                else
                    this.RemoveComponent(Component.{{ component.key }}) |> ignore
                
        member this.Set{{ component.key }}(value) =
            this.is{{ component.key }} <- value
            this

{% else %}
        member this.{{ component.key | camel }}ComponentPool
            with get() = new Stack<{{ component.key }}Component>()

        member this.{{ component.key | camel }}
            with get() = this.GetComponent(Component.{{ component.key }}):?>{{ component.key }}Component

        member this.Has{{ component.key }}
            with get() = this.HasComponent(Component.{{ component.key }})
 
        member this.Clear{{ component.key }}ComponentPool() =
            this.{{ component.key | camel }}ComponentPool.Clear()

        member this.Add{{ component.key }}({{ component.value | paramsonly }}) =
            let mutable c =
                match this.{{ component.key | camel }}ComponentPool.Count with
                | 0 -> new {{ component.key }}Component()
                | _ -> this.{{ component.key | camel }}ComponentPool.Pop()
            {% for field in component.value %}c.{{ field | property }} <- {{ field | property }}
            {% endfor %}this.AddComponent(Component.{{ component.key }}, c) |> ignore
            this

        member this.Replace{{ component.key }}({{ component.value | paramsonly }}) =
            let previousComponent = if this.Has{{ component.key }} then this.{{ component.key | camel }} else null
            let mutable c =
                match this.{{ component.key | camel }}ComponentPool.Count with
                | 0 -> new {{ component.key }}Component()
                | _ -> this.{{ component.key | camel }}ComponentPool.Pop()
            {% for field in component.value %}c.{{ field | property }} <- {{ field | property }}
            {% endfor %}this.ReplaceComponent(Component.{{ component.key }}, c) |> ignore
            if not(isNull(previousComponent)) then
                this.{{ component.key | camel }}ComponentPool.Push(previousComponent)
            this

        member this.Remove{{ component.key }}() =
            let c = this.{{ component.key | camel }}
            this.RemoveComponent(Component.{{ component.key }}) |> ignore
            this.{{ component.key | camel }}ComponentPool.Push(c)
            this

{% endif %}{% endfor %}