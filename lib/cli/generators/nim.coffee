#!/usr/bin/env coffee
###
 * bosco code generation
 *
 * Generate Nim stubs for
 * use by bosco.ECS
 *
###
fs = require('fs')
path = require('path')
mkdirp = require('mkdirp')
config = require("#{process.cwd()}/bosco.json")


params = (a, sep = ', ') ->
  b = []
  for item in a
    b.push item.split(':')[0]
  return b.join(sep)

args = (a, sep = ', ') ->
  b = []
  for item in a
    b.push item
  return b.join(sep)

  
module.exports =
#
# generate entity extensions
#
# @return none
#
  run: (flags...) ->

    #if flags.indexOf('-u') or flags.indexOf('--unity')

    s0 = [] # Components.nim
    s1 = [] # Entity.nim
    se = [] # header
    sv = [] # variables
    sc = [] # Entity constructor
    s2 = [] # Match.nim
    sm = [] # variables
    s3 = [] # World.nim


    s0.push "##"
    s0.push "## Entitas Generated Components for #{config.namespace}"
    s0.push "##"
    s0.push "## do not edit this file"
    s0.push "##"
    s0.push "import bosco/ECS"
    s0.push "import bosco/Sprite"
    s0.push ""
    
    se.push "##"
    se.push "## Entitas Generated Entity Extensions for #{config.namespace}"
    se.push "##"
    se.push "## do not edit this file"
    se.push "##"
    se.push "import queues"
    se.push "import bosco/ECS"
    se.push "import bosco/Sprite"
    se.push "import ComponentEx"
    se.push "const POOL_SIZE : int = #{config.alloc.components}"
    se.push ""
    se.push ""

    s2.push "##"
    s2.push "## Entitas Generated Match Extensions for #{config.namespace}"
    s2.push "##"
    s2.push "## do not edit this file"
    s2.push "##"
    s2.push "import bosco/ECS"
    s2.push "import ComponentEx"
    s2.push "type TMatch = ref object of RootObj"

    s3.push "##"
    s3.push "## Entitas Generated World Extensions for #{config.namespace}"
    s3.push "##"
    s3.push "## do not edit this file"
    s3.push "##"
    s3.push "import bosco/ECS"
    s3.push "import ComponentEx"
    s3.push "import MatchEx"
    s3.push "import EntityEx"
    s3.push ""
    s3.push ""

    ###
     * Components Enum
    ###
    s0.push ""
    s0.push "type"
    s0.push "  Component* = enum"
    for Name, properties of config.components
      s0.push "    #{Name}"
    s0.push ""
    s0.push ""

    ###
     * Components Type Definitions
    ###
    s0.push ""
    for Name, properties of config.components
      name = Name[0].toLowerCase()+Name[1...]
      s0.push "  #{Name}Component* = ref object of IComponent"
      if properties is false
        s0.push "    #{name}* : bool"
      else
        for p in properties
          s0.push "    #{p.replace(':', '* : ')}"
      s0.push ""
    s0.push ""

    ###
     * Extend Entity with components
    ###
    s1.push ""
    for Name, properties of config.components
      name = Name[0].toLowerCase()+Name[1...]
      switch properties
        when false
          sv.push "  ## @type {#{config.namespace}.#{Name}Component}"
          sv.push "  #{name}Component* : #{Name}Component"
          sc.push ""
          sc.push "Pool.#{name}Component = #{Name}Component()"
          s1.push "## @type {boolean} "
          s1.push "proc is#{Name}*(this : Entity) : bool ="
          s1.push "  this.hasComponent(int(Component.#{Name}))"
          s1.push "proc `is#{Name}=`*(this : Entity, value : bool) ="
          s1.push "  if value != this.is#{Name}:"
          s1.push "    if value:"
          s1.push "      discard this.addComponent(int(Component.#{Name}), Pool.#{name}Component)"
          s1.push "    else:"
          s1.push "      discard this.removeComponent(int(Component.#{Name}))"
          s1.push ""
          s1.push "##"
          s1.push "## @param {boolean} value"
          s1.push "## @returns {bosco.Entity}"
          s1.push "##"
          s1.push "proc set#{Name}*(this : Entity, value : bool) : Entity ="
          s1.push "  this.is#{Name} = value"
          s1.push "  return this"
          s1.push ""

        else
          sv.push "  ## @type {bosco.utils.Bag}"
          sv.push "  #{name}Component* : Queue[#{Name}Component]"
          s1.push ""
          
          sc.push ""
          sc.push "Pool.#{name}Component = initQueue[#{Name}Component]()"
          sc.push "for i in 1..POOL_SIZE:Pool.#{name}Component.add(#{Name}Component())"
          
          s1.push "proc clear#{Name}Component*(this : Entity) ="
          s1.push "  Pool.#{name}Component = initQueue[#{Name}Component]()"
          s1.push ""
          s1.push "## @type {#{config.namespace}.#{Name}Component} "
          s1.push "proc #{name}*(this : Entity) : #{Name}Component ="
          s1.push "  (#{Name}Component)this.getComponent(int(Component.#{Name}))"
          s1.push ""
          s1.push "## @type {boolean} "
          s1.push "proc has#{Name}*(this : Entity) : bool ="
          s1.push "  this.hasComponent(int(Component.#{Name}))"
          s1.push ""
          s1.push "##"
          for p in properties
            s1.push "## @param {#{p.split(':')[1]}} #{p.split(':')[0]}"
          s1.push "## @returns {bosco.Entity}"
          s1.push "##"
          s1.push "proc add#{Name}*(this : Entity, #{properties.join(', ')}) : Entity ="
          s1.push "  var component = if Pool.#{name}Component.len > 0 : Pool.#{name}Component.dequeue() else: #{Name}Component()"
          for p in properties
            s1.push "  component.#{p.split(':')[0]} = #{p.split(':')[0]}"
          s1.push "  discard this.addComponent(int(Component.#{Name}), component)"
          s1.push "  return this"
          s1.push ""
          s1.push "##"
          for p in properties
            s1.push "## @param {#{p.split(':')[1]}} #{p.split(':')[0]}"
          s1.push "## @returns {bosco.Entity}"
          s1.push "##"
          s1.push "proc replace#{Name}*(this : Entity, #{properties.join(', ')}) : Entity ="
          s1.push "  var previousComponent = if this.has#{Name} : this.#{name} else: nil"
          s1.push "  var component = if Pool.#{name}Component.len > 0 : Pool.#{name}Component.dequeue() else: #{Name}Component()"
          for p in properties
            s1.push "  component.#{p.split(':')[0]} = #{p.split(':')[0]}"
          s1.push "  discard this.replaceComponent(int(Component.#{Name}), component)"
          s1.push "  if previousComponent != nil:"
          s1.push "    Pool.#{name}Component.enqueue(previousComponent)"
          s1.push ""
          s1.push "  return this"
          s1.push ""
          s1.push "##"
          s1.push "## @returns {bosco.Entity}"
          s1.push "##"
          s1.push "proc remove#{Name}*(this : Entity) : Entity ="
          s1.push "  var component = this.#{name}"
          s1.push "  discard this.removeComponent(int(Component.#{Name}))"
          s1.push "  Pool.#{name}Component.enqueue(component)"
          s1.push "  return this"
          s1.push ""


    ###
     * Matchers
    ###
    for Name, properties of config.components
      name = Name[0].toLowerCase()+Name[1...];
      s2.push "  ## @type {bosco.Match} "
      s2.push "  match#{Name} : Matcher"
      
      sm.push ""
      sm.push "## @type {bosco.Matcher} "
      sm.push "proc #{Name}*(this : TMatch) : Matcher ="
      sm.push "  if this.match#{Name} == nil:"
      sm.push "    this.match#{Name} = MatchAllOf(@[int(Component.#{Name})])"
      sm.push "  return this.match#{Name}"


    
    for Name, pooled of config.entities
      if pooled
        name = Name[0].toLowerCase()+Name[1...];
        properties = config.components[Name]
        if config.components[Name] is false
          s3.push "## @type {bosco.Match} "
          s3.push "proc #{name}Entity*(this : World) : Entity ="
          s3.push "  return this.getGroup(Match.#{Name}).getSingleEntity()"
          s3.push ""
          s3.push "## @type {boolean} "
          s3.push "proc is#{Name}*(this : World) : bool ="
          s3.push "  return this.#{name}Entity != nil"
          s3.push "proc `is#{Name}=`*(this : World, value : bool) ="
          s3.push "  var entity = this.#{name}Entity"
          s3.push "  if value != (entity != nil):"
          s3.push "    if value:"
          s3.push "      this.createEntity(\"#{Name}\").is#{Name} = true"
          s3.push "    else:"
          s3.push "      this.destroyEntity(entity)"
          s3.push ""


        else
          s3.push "## @type {bosco.Entity} "
          s3.push "proc #{name}Entity*(this : World) : Entity ="
          s3.push "  return this.getGroup(Match.#{Name}).getSingleEntity()"
          s3.push ""
          s3.push "## @type {#{config.namespace}.#{Name}Component} "
          s3.push "proc #{name}*(this : World) : #{Name}Component ="
          s3.push "  return this.#{name}Entity.#{name}"
          s3.push ""
          s3.push "## @type {boolean} "
          s3.push "proc has#{Name}*(this : World) : bool ="
          s3.push "  return this.#{name}Entity != nil"
          s3.push ""
          s3.push "##"
          for p in properties
            s3.push "## @param {#{p.split(':')[1]}} #{p.split(':')[0]}"
          s3.push "## @returns {bosco.Entity}"
          s3.push "##"
          s3.push "proc set#{Name}*(this : World, #{properties.join(', ')}) : Entity ="
          s3.push "  if this.has#{Name}:"
          s3.push "    raise newException(OSError, \"SingleEntityException Matching #{Name}\")"
          s3.push ""
          s3.push "  var entity = this.createEntity(\"#{Name}\")"
          s3.push "  discard entity.add#{Name}(#{params(properties)})"
          s3.push "  return entity"
          s3.push ""
          s3.push "##"
          for p in properties
            s3.push "## @param {#{p.split(':')[1]}} #{p.split(':')[0]}"
          s3.push "## @returns {bosco.Entity}"
          s3.push "##"
          s3.push "proc replace#{Name}*(this : World, #{properties.join(', ')}) : Entity ="
          s3.push "  var entity = this.#{name}Entity"
          s3.push "  if entity == nil:"
          s3.push "    entity = this.set#{Name}(#{params(properties)})"
          s3.push "  else:"
          s3.push "     discard entity.replace#{Name}(#{params(properties)})"
          s3.push "  return entity"
          s3.push ""
          s3.push "##"
          s3.push "## @returns {bosco.Entity}"
          s3.push "##"
          s3.push "proc remove#{Name}*(this : World) ="
          s3.push "  this.destroyEntity(this.#{name}Entity)"
          s3.push ""


          
    se.push "type TPool = ref object of RootObj"
    se.push sv.join('\n')
    se.push "var Pool* = TPool()"
    se.push sc.join('\n')
    se.push s1.join('\n')

    s2.push sm.join('\n')
    s2.push "var Match* = TMatch()"

    mkdirp.sync path.join(process.cwd(), 'gen/')
    
    s0.push('\n')
    se.push('\n')
    s2.push('\n')
    s3.push('\n')
    
    fs.writeFileSync(path.join(process.cwd(), "src/ComponentEx.nim"), s0.join('\n'))
    fs.writeFileSync(path.join(process.cwd(), "src/EntityEx.nim"), se.join('\n'))
    fs.writeFileSync(path.join(process.cwd(), "src/MatchEx.nim"), s2.join('\n'))
    fs.writeFileSync(path.join(process.cwd(), "src/WorldEx.nim"), s3.join('\n'))

