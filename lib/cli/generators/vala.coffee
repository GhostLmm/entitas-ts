#!/usr/bin/env coffee
###
 * Entitas code generation
 *
 * Generate Vala stubs for
 * use by Bosco.ECS/Genie
 *
###
fs = require('fs')
path = require('path')
mkdirp = require('mkdirp')
config = require("#{process.cwd()}/entitas.json")


params = (a, sep = ', ') ->
  b = []
  for item in a
    b.push item.split(':')[0]
  return b.join(sep)

args = (a, sep = ', ') ->
  b = []
  for item in a
    b.push item
  return b.join(sep)

module.exports =
#
# generate entity extensions
#
# @return none
#
  run: (flags...) ->

    #if flags.indexOf('-u') or flags.indexOf('--unity')

    s0 = [] # Components.gs
    s1 = [] # Entity.vala
    se = [] # header
    sv = [] # variables
    sc = [] # Entity constructor
    s2 = [] # Matching.vala
    sm = [] # variables
    s3 = [] # World.vala


    s0.push "/**"
    s0.push " * Entitas Generated Components for #{config.namespace}"
    s0.push " *"
    s0.push " * do not edit this file"
    s0.push " */"
    s0.push "[indent=4]"
    s0.push "uses Bosco"
    s0.push "uses Bosco.ECS"
    s0.push ""
    
    se.push "/**"
    se.push " * Entitas Generated Entity Extensions for #{config.namespace}"
    se.push " *"
    se.push " * do not edit this file"
    se.push " */"
    se.push "[indent=4]"
    se.push "uses Bosco"
    se.push "uses Bosco.ECS"
    se.push "namespace Bosco.ECS"
    se.push "    const POOL_SIZE : int = #{config.alloc.components}"
    se.push ""
    se.push "    class Entity : EntityBase"
    se.push ""          
    se.push "        construct(componentsEnum : array of string, totalComponents : int=32)"
    se.push "            super(componentsEnum, totalComponents)"
    se.push "            /* Preallocate component pools*/"
    se.push ""

    s2.push "/**"
    s2.push " * Entitas Generated Match Extensions for #{config.namespace}"
    s2.push " *"
    s2.push " * do not edit this file"
    s2.push " */"
    s2.push "[indent=4]"
    s2.push "uses Bosco"
    s2.push "uses Bosco.ECS"
    s2.push "namespace Bosco.ECS "
    s2.push "    class Matching : DarkMatter "
    s2.push ""
    s2.push ""

    s3.push "/**"
    s3.push " * Entitas Generated World Extensions for #{config.namespace}"
    s3.push " *"
    s3.push " * do not edit this file"
    s3.push " */"
    s3.push "[indent=4]"
    s3.push "uses Bosco"
    s3.push "uses Bosco.ECS"
    s3.push "namespace Bosco.ECS "
    s3.push "    class World : WorldBase "
    s3.push ""
    s3.push ""

    s0.push "const components: array of string = {"
    c0 = 0
    for Name, properties of config.components
      c0++
      s0.push "    \"#{Name}Component\"" + if c0<Object.keys(config.components).length then "," else ""
    s0.push "}"
    ###
     * Components Enum
    ###
    s0.push ""
    s0.push "enum Component"
    for Name, properties of config.components
      s0.push "    #{Name}"
    s0.push "    TotalComponents"
    s0.push ""
    s0.push ""

    ###
     * Components Class Definitions
    ###
    s0.push ""
    for Name, properties of config.components
      name = Name[0].toLowerCase()+Name[1...]
      s0.push "class #{Name}Component : DarkMatter implements IComponent"
      if properties is false
        s0.push "    #{name} : bool = true"
      else
        for p in properties
          s0.push "    #{p}"
      s0.push ""
    s0.push ""

    ###
     * Extend Entity with components
    ###
    s1.push ""
    for Name, properties of config.components
      name = Name[0].toLowerCase()+Name[1...]
      switch properties
        when false
          sv.push "        /** @type {#{config.namespace}.#{Name}Component} */"
          sv.push "        _#{name}Component : #{Name}Component"
          sc.push "            _#{name}Component = new #{Name}Component()"
          s1.push "        /** @type {boolean} */"
          s1.push "        prop is#{Name} : bool"
          s1.push "            get" 
          s1.push "                return hasComponent(Component.#{Name})"
          s1.push "            set"
          s1.push "                if value != is#{Name}"
          s1.push "                    if value"
          s1.push "                        addComponent(Component.#{Name}, _#{name}Component)"
          s1.push "                    else"
          s1.push "                        removeComponent(Component.#{Name})"
          s1.push ""
          s1.push "        /**"
          s1.push "         * @param {boolean} value"
          s1.push "         * @returns {entitas.Entity}"
          s1.push "         */"
          s1.push "        def set#{Name}(value : bool) : Entity"
          s1.push "            is#{Name} = value"
          s1.push "            return this"
          s1.push ""

        else
          sv.push "        /** @type {entitas.utils.Bag} */"
          sv.push "        _#{name}ComponentPool : Bag of #{Name}Component"
          s1.push ""
          
          sc.push "            _#{name}ComponentPool = new Bag of #{Name}Component"
          sc.push "            for var i=1 to POOL_SIZE"
          sc.push "                _#{name}ComponentPool.push(new #{Name}Component())"
          
          s1.push "        def clear#{Name}ComponentPool() "
          s1.push "            _#{name}ComponentPool.clear()"
          s1.push ""
          s1.push "        /** @type {#{config.namespace}.#{Name}Component} */"
          s1.push "        prop #{name} : #{Name}Component"
          s1.push "            get" 
          s1.push "                return (#{Name}Component)getComponent(Component.#{Name})"
          s1.push ""
          s1.push "        /** @type {boolean} */"
          s1.push "        prop has#{Name} : bool"
          s1.push "            get"
          s1.push "                return hasComponent(Component.#{Name})"
          s1.push ""
          s1.push "        /**"
          for p in properties
            s1.push "         * @param {#{p.split(':')[1]}} #{p.split(':')[0]}"
          s1.push "         * @returns {entitas.Entity}"
          s1.push "         */"
          s1.push "        def add#{Name}(#{properties.join(', ')}) : Entity"
          s1.push "            var component = _#{name}ComponentPool.length > 0 ? _#{name}ComponentPool.pop() : new #{Name}Component()"
          for p in properties
            s1.push "            component.#{p.split(':')[0]} = #{p.split(':')[0]}"
          s1.push "            addComponent(Component.#{Name}, component)"
          s1.push "            return this"
          s1.push ""
          s1.push "        /**"
          for p in properties
            s1.push "         * @param {#{p.split(':')[1]}} #{p.split(':')[0]}"
          s1.push "         * @returns {entitas.Entity}"
          s1.push "         */"
          s1.push "        def replace#{Name}(#{properties.join(', ')}) : Entity"
          s1.push "            var previousComponent = has#{Name} ? this.#{name} : null"
          s1.push "            var component = _#{name}ComponentPool.length > 0 ? _#{name}ComponentPool.pop() : new #{Name}Component()"
          for p in properties
            s1.push "            component.#{p.split(':')[0]} = #{p.split(':')[0]}"
          s1.push "            replaceComponent(Component.#{Name}, component)"
          s1.push "            if previousComponent != null"
          s1.push "                _#{name}ComponentPool.push(previousComponent)"
          s1.push ""
          s1.push "            return this;"
          s1.push ""
          s1.push "        /**"
          s1.push "         * @returns {entitas.Entity}"
          s1.push "         */"
          s1.push "        def remove#{Name}() : Entity"
          s1.push "            var component = #{name}"
          s1.push "            removeComponent(Component.#{Name})"
          s1.push "            _#{name}ComponentPool.push(component)"
          s1.push "            return this"
          s1.push ""


    ###
     * Matchers
    ###
    for Name, properties of config.components
      name = Name[0].toLowerCase()+Name[1...];
      sm.push "        /** @type {entitas.Matching} */"
      sm.push "        _match#{Name} : static IMatcher"
      s2.push ""
      s2.push "        /** @type {entitas.Matcher} */"
      s2.push "        prop static #{Name} : IMatcher "
      s2.push "            get"
      s2.push "                if _match#{Name} == null"
      s2.push "                    var match#{Name} = Matcher.AllOf({Component.#{Name}})"
      s2.push "                return _match#{Name}"
      s2.push ""


    ###
     * Pooled Entities
    ###
    s3.push ""
    s3.push "        componentsEnum : static array of string"
    s3.push "        totalComponents : static int = 0"
    s3.push "        instance : static World "
    s3.push ""
    s3.push "        construct(componentsEnum : array of string, startCreationIndex : int=0)"
    s3.push "            super(componentsEnum, startCreationIndex)"
    s3.push ""
    
    for Name, pooled of config.entities
      if pooled
        name = Name[0].toLowerCase()+Name[1...];
        properties = config.components[Name]
        if config.components[Name] is false
          s3.push "        /** @type {entitas.Match} */"
          s3.push "        prop #{name}Entity : Entity"
          s3.push "            get"
          s3.push "                return getGroup(Matching.#{Name}).getSingleEntity()"
          s3.push ""
          s3.push "        /** @type {boolean} */"
          s3.push "        prop is#{Name} : bool"
          s3.push "            get"
          s3.push "                return #{name}Entity != null"
          s3.push ""
          s3.push "            set"
          s3.push "                var entity = #{name}Entity"
          s3.push "                if value != (entity != null)"
          s3.push "                    if value"
          s3.push "                        createEntity(\"#{Name}\").is#{Name} = true"
          s3.push "                    else"
          s3.push "                        destroyEntity(entity)"
          s3.push ""


        else
          s3.push "        /** @type {entitas.Entity} */"
          s3.push "        prop #{name}Entity : Entity"
          s3.push "            get"
          s3.push "                return getGroup(Matching.#{Name}).getSingleEntity()"
          s3.push ""
          s3.push "        /** @type {#{config.namespace}.#{Name}Component} */"
          s3.push "        prop #{name} : #{Name}Component"
          s3.push "            get"
          s3.push "                return #{name}Entity.#{name}"
          s3.push ""
          s3.push "        /** @type {boolean} */"
          s3.push "        prop has#{Name} : bool"
          s3.push "            get"
          s3.push "                return #{name}Entity != null"
          s3.push ""
          s3.push "        /**"
          for p in properties
            s3.push "         * @param {#{p.split(':')[1]}} #{p.split(':')[0]}"
          s3.push "         * @returns {entitas.Entity}"
          s3.push "         */"
          s3.push "        def set#{Name}(#{properties.join(', ')}) : Entity"
          s3.push "            if has#{Name}"
          s3.push "                raise new Exception.ECS(\"SingleEntityException Matching #{Name}\")"
          s3.push ""
          s3.push "            var entity = createEntity(\"#{Name}\")"
          s3.push "            entity.add#{Name}(#{params(properties)})"
          s3.push "            return entity"
          s3.push ""
          s3.push "        /**"
          for p in properties
            s3.push "         * @param {#{p.split(':')[1]}} #{p.split(':')[0]}"
          s3.push "         * @returns {entitas.Entity}"
          s3.push "         */"
          s3.push "        def replace#{Name}(#{properties.join(', ')}) : Entity"
          s3.push "            var entity = #{name}Entity"
          s3.push "            if entity == null"
          s3.push "                entity = set#{Name}(#{params(properties)})"
          s3.push "            else"
          s3.push "                entity.replace#{Name}(#{params(properties)})"
          s3.push "            return entity"
          s3.push ""
          s3.push "        /**"
          s3.push "         * @returns {entitas.Entity}"
          s3.push "         */"
          s3.push "        def remove#{Name}()"
          s3.push "            destroyEntity(#{name}Entity)"
          s3.push ""


          
          
    se.push sc.join('\n')
    se.push s1.join('\n')
    se.push sv.join('\n')

    s2.push sm.join('\n')

    mkdirp.sync path.join(process.cwd(), 'gen/')
    
    s0.push('\n')
    se.push('\n')
    s2.push('\n')
    s3.push('\n')
    
    fs.writeFileSync(path.join(process.cwd(), "gen/GeneratedComponents.gs"), s0.join('\n'))
    fs.writeFileSync(path.join(process.cwd(), "gen/Entity.gs"), se.join('\n'))
    fs.writeFileSync(path.join(process.cwd(), "gen/Matching.gs"), s2.join('\n'))
    fs.writeFileSync(path.join(process.cwd(), "gen/World.gs"), s3.join('\n'))

