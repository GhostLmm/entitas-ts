#!/usr/bin/env coffee
###
 * Entitas code generation
 *
 * Generate Vala stubs for
 * use by Bosco.ECS/Genie
 *
###
fs = require('fs')
path = require('path')
mkdirp = require('mkdirp')
config = require("#{process.cwd()}/entitas.json")


params = (a, sep = ', ') ->
  b = []
  for item in a
    b.push item.split(':')[0]
  return b.join(sep)

module.exports =
#
# generate entity extensions
#
# @return none
#
  run: (flags...) ->

    #if flags.indexOf('-u') or flags.indexOf('--unity')

    s0 = [] # Components.gs
    s1 = [] # Entity.vala
    sc = [] # Entity constructor
    s2 = [] # Matching.vala
    s3 = [] # World.vala

    s0.push "/**"
    s0.push " * Entitas Generated Components for #{config.namespace}"
    s0.push " *"
    s0.push " * do not edit this file"
    s0.push " */"
    s0.push "[indent=4]"
    s0.push "uses Bosco"
    s0.push "uses Bosco.ECS"
    s0.push ""
    
    s1.push "/**"
    s1.push " * Entitas Generated Entity Extensions for #{config.namespace}"
    s1.push " *"
    s1.push " * do not edit this file"
    s1.push " */"
    s1.push ""
    s1.push "using Bosco;"
    s1.push "using Bosco.ECS;"
    s1.push "namespace Bosco.ECS {"
    s1.push "  public class Entity : BaseEntity {"
    s1.push ""
    s1.push ""

    s2.push "/**"
    s2.push " * Entitas Generated Match Extensions for #{config.namespace}"
    s2.push " *"
    s2.push " * do not edit this file"
    s2.push " */"
    s2.push ""
    s2.push "using Bosco;"
    s2.push "using Bosco.ECS;"
    s2.push "namespace Bosco.ECS {"
    s2.push "  public class Matching : DarkMatter {"
    s2.push ""
    s2.push ""

    s3.push "/**"
    s3.push " * Entitas Generated World Extensions for #{config.namespace}"
    s3.push " *"
    s3.push " * do not edit this file"
    s3.push " */"
    s3.push ""
    s3.push "using Bosco;"
    s3.push "using Bosco.ECS;"
    s3.push "namespace Bosco.ECS {"
    s3.push "    public class World : BaseWorld {"
    s3.push ""
    s3.push ""

    s0.push "const components: array of string = {"
    c0 = 0
    for Name, properties of config.components
      c0++
      s0.push "    \"#{Name}Component\"" + if c0<Object.keys(config.components).length then "," else ""
    s0.push "}"
    ###
     * Components Enum
    ###
    s0.push ""
    s0.push "enum Component"
    for Name, properties of config.components
      s0.push "    #{Name}"
    s0.push "    TotalComponents"
    s0.push ""
    s0.push ""

    ###
     * Components Class Definitions
    ###
    s0.push ""
    for Name, properties of config.components
      name = Name[0].toLowerCase()+Name[1...];
      s0.push "class #{Name}Component : DarkMatter implements IComponent"
      if properties is false
        s0.push "    #{name} : bool = true"
      else
        for p in properties
          s0.push "    #{p}"
      s0.push ""
    s0.push ""

    ###
     * Extend Entity with components
    ###
    s1.push ""
    for Name, properties of config.components
      name = Name[0].toLowerCase()+Name[1...];
      switch properties
        when false
          s1.push "    /** @type {#{config.namespace}.#{Name}Component} */"
          s1.push "    #{Name}Component _#{name}Component;"
          s1.push "    /** @type {boolean} */"
          s1.push "    public bool is#{Name} {"
          s1.push "       get {return hasComponent(Component.#{Name});}"
          s1.push "       set(bool value) {"
          s1.push "        if (value != is#{Name}) {"
          s1.push "          if (value) {"
          s1.push "            addComponent(Component.#{Name}, #{name}Component);"
          s1.push "          } else {"
          s1.push "            removeComponent(Component.#{Name});"
          s1.push "          }"
          s1.push "        }"
          s1.push "      }"
          s1.push "    }"
          s1.push "  /**"
          s1.push "   * @param {boolean} value"
          s1.push "   * @returns {entitas.Entity}"
          s1.push "   */"
          s1.push "    public Entity set#{Name} {"
          s1.push "      is#{Name} = value;"
          s1.push "      return this;"
          s1.push "    }"

        else
          s1.push "    /** @type {entitas.utils.Bag} */"
          s1.push "    Queue<#{Name}Component> _#{name}ComponentPool;"
          
          sc.push "      _#{name}ComponentPool = new Queue<#{Name}Component>();"
          sc.push "      for (var i=0; i<#{config.alloc.components}; i++) {"
          sc.push "        _#{name}ComponentPool.push_head(new #{Name}Component());"
          sc.push "      }"
          
          s1.push "    public clear#{Name}ComponentPool() {"
          s1.push "      _#{name}ComponentPool.clear();"
          s1.push "    }"
          s1.push "    /** @type {#{config.namespace}.#{Name}Component} */"
          s1.push "    public #{Name}Component #{name} {"
          s1.push "      get {return getComponent(Component.#{Name});}"
          s1.push "    }"
          s1.push "    /** @type {boolean} */"
          s1.push "    public bool has#{Name} {"
          s1.push "      get {return hasComponent(Component.#{Name});}"
          s1.push "    }"
          s1.push "    /**"
          for p in properties
            s1.push "     * @param {#{p.split(':')[1]}} #{p.split(':')[0]}"
          s1.push "     * @returns {entitas.Entity}"
          s1.push "     */"
          s1.push "    public Entity add#{Name}() {"
          s1.push "      var component = _#{name}ComponentPool.length > 0 ? _#{name}ComponentPool.pop_head() : new #{Name}Component();"
          for p in properties
            s1.push "      component.#{p.split(':')[0]} = #{p.split(':')[0]};"
          s1.push "      addComponent(Component.#{Name}, component);"
          s1.push "      return this;"
          s1.push "    }"
          s1.push "    /**"
          for p in properties
            s1.push "     * @param {#{p.split(':')[1]}} #{p.split(':')[0]}"
          s1.push "     * @returns {entitas.Entity}"
          s1.push "     */"
          s1.push "    public Entity replace#{Name}() {"
          s1.push "      var previousComponent = has#{Name} ? #{name} : null;"
          s1.push "      var component = _#{name}ComponentPool.length > 0 ? _#{name}ComponentPool.pop_head() : new #{Name}Component();"
          for p in properties
            s1.push "      component.#{p.split(':')[0]} = #{p.split(':')[0]};"
          s1.push "      replaceComponent(Component.#{Name}, component);"
          s1.push "      if (previousComponent != null) {"
          s1.push "        _#{name}ComponentPool.push_head(previousComponent);"
          s1.push "      }"
          s1.push "      return this;"
          s1.push "    }"
          s1.push "    /**"
          s1.push "     * @returns {entitas.Entity}"
          s1.push "     */"
          s1.push "    public Entity remove#{Name}()  {"
          s1.push "      var component = #{name};"
          s1.push "      removeComponent(Component.#{Name});"
          s1.push "      _#{name}ComponentPool.push_head(component);"
          s1.push "      return this;"
          s1.push "    }"


    ###
     * Matchers
    ###
    for Name, properties of config.components
      name = Name[0].toLowerCase()+Name[1...];
      s2.push "    /** @type {entitas.Matching} */"
      s2.push "    static IMatcher _match#{Name};"
      s2.push "    "
      s2.push "    /** @type {entitas.Matcher} */"
      s2.push "    public static IMatcher #{Name} {"
      s2.push "      get {"
      s2.push "        if (Matching._match#{Name} == null) {"
      s2.push "          var match#{Name} = Matcher.AllOf({Component.#{Name}});"
      s2.push "        }"
      s2.push "        "
      s2.push "        return _match#{Name};"
      s2.push "      }"
      s2.push "    }"
    s2.push "  }"
    s2.push "}"


    ###
     * Pooled Entities
    ###
    s3.push "    "
    s3.push "    public static string[] componentsEnum;"
    s3.push "    public static int totalComponents = 0;"
    s3.push "    public static World instance;"
    s3.push "    "
    s3.push "    public Entity(string[] componentsEnum, int totalComponents=32) {"
    s3.push "      base(componentsEnum, startCreationIndex);"
    s3.push "    }"
    s3.push "    "
    
    for Name, pooled of config.entities
      if pooled
        name = Name[0].toLowerCase()+Name[1...];
        properties = config.components[Name]
        if config.components[Name] is false
          s3.push "    /** @type {entitas.Match} */"
          s3.push "    public Entity #{name}Entity {"
          s3.push "      get {"
          s3.push "        return getGroup(Matching.#{Name}).getSingleEntity();"
          s3.push "      }"
          s3.push "    }"
          s3.push "    /** @type {boolean} */"
          s3.push "    public bool is#{Name} {"
          s3.push "      get {"
          s3.push "        return #{name}Entity != null;"
          s3.push "      },"
          s3.push "      set(bool value) {"
          s3.push "        var entity = #{name}Entity;"
          s3.push "        if (value != (entity != null)) {"
          s3.push "          if (value) {"
          s3.push "            createEntity('#{Name}').is#{Name} = true;"
          s3.push "          } else {"
          s3.push "            destroyEntity(entity);"
          s3.push "          }"
          s3.push "        }"
          s3.push "      }"
          s3.push "    }"


        else
          s3.push "    /** @type {entitas.Entity} */"
          s3.push "    public Entity #{name}Entity {"
          s3.push "      get {"
          s3.push "        return getGroup(Matching.#{Name}).getSingleEntity();"
          s3.push "      }"
          s3.push "    }"
          s3.push "    /** @type {#{config.namespace}.#{Name}Component} */"
          s3.push "    public #{Name}Component #{name} {"
          s3.push "      get {"
          s3.push "        return #{name}Entity.#{name};"
          s3.push "      }"
          s3.push "    }"
          s3.push "    /** @type {boolean} */"
          s3.push "    public bool has#{Name} {"
          s3.push "      get {"
          s3.push "        return #{name}Entity != null;"
          s3.push "      }"
          s3.push "    }"
          s3.push "    /**"
          for p in properties
            s3.push "     * @param {#{p.split(':')[1]}} #{p.split(':')[0]}"
          s3.push "     * @returns {entitas.Entity}"
          s3.push "     */"
          s3.push "    public Entity set#{Name}(#{params(properties)}) {"
          s3.push "      if (has#{Name}) {"
          s3.push "        throw new SingleEntityException(Matching.#{Name});"
          s3.push "      }"
          s3.push "      var entity = createEntity('#{Name}');"
          s3.push "      entity.add#{Name}(#{params(properties)});"
          s3.push "      return entity;"
          s3.push "    }"
          s3.push "    /**"
          for p in properties
            s3.push "     * @param {#{p.split(':')[1]}} #{p.split(':')[0]}"
          s3.push "     * @returns {entitas.Entity}"
          s3.push "     */"
          s3.push "    public Entity replace#{Name}(#{params(properties)}) {"
          s3.push "      var entity = #{name}Entity;"
          s3.push "      if (entity == null) {"
          s3.push "        entity = set#{Name}(#{params(properties)});"
          s3.push "      } else {"
          s3.push "        entity.replace#{Name}(#{params(properties)});"
          s3.push "      }"
          s3.push "      return entity;"
          s3.push "    }"
          s3.push "    /**"
          s3.push "     * @returns {entitas.Entity}"
          s3.push "     */"
          s3.push "    public void remove#{Name} {"
          s3.push "      destroyEntity(#{name}Entity);"
          s3.push "    }"
    s3.push "  }"
    s3.push "}"

          
          
    s1.push "    public Entity(string[] componentsEnum, int totalComponents=32) {"
    s1.push "      base(componentsEnum, totalComponents);"
    s1.push "      /* Preallocate component pools*/"
    s1.push sc.join('\n')
    s1.push "    }"
    s1.push "  }"
    s1.push "}"

    mkdirp.sync path.join(process.cwd(), 'gen/')
    
    fs.writeFileSync(path.join(process.cwd(), "gen/GeneratedComponents.gs"), s0.join('\n'))
    fs.writeFileSync(path.join(process.cwd(), "gen/Entity.vala"), s1.join('\n'))
    fs.writeFileSync(path.join(process.cwd(), "gen/Matching.vala"), s2.join('\n'))
    fs.writeFileSync(path.join(process.cwd(), "gen/World.vala"), s3.join('\n'))

